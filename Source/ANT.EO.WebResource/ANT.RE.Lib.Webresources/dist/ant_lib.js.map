{"version":3,"file":"ant_lib.js","mappings":"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","sources":["webpack://ANT/./src/Constant/constants.ts","webpack://ANT/./src/Lib/Attributes/Attribute/attribute.ts","webpack://ANT/./src/Lib/Attributes/attributes.ts","webpack://ANT/./src/Lib/Context/FormContext/formcontext.ts","webpack://ANT/./src/Lib/Context/GlobalContext/globalcontext.ts","webpack://ANT/./src/Lib/Context/GridContext/grid.ts","webpack://ANT/./src/Lib/Context/GridContext/gridcontext.ts","webpack://ANT/./src/Lib/Context/contextBase.ts","webpack://ANT/./src/Lib/Controls/Control/control.ts","webpack://ANT/./src/Lib/Controls/Section/section.ts","webpack://ANT/./src/Lib/Controls/Tab/tab.ts","webpack://ANT/./src/Lib/Controls/control-base.ts","webpack://ANT/./src/Lib/Controls/controls.ts","webpack://ANT/./src/Lib/Entity/entity.ts","webpack://ANT/./src/Lib/Extensions/extensions.ts","webpack://ANT/./src/Lib/Logger/abstractions/log-level.ts","webpack://ANT/./src/Lib/Logger/abstractions/message-handler-base.ts","webpack://ANT/./src/Lib/Logger/abstractions/prefix-type.ts","webpack://ANT/./src/Lib/Logger/builders/logger-builder.ts","webpack://ANT/./src/Lib/Logger/builders/logger-configuration-builder.ts","webpack://ANT/./src/Lib/Logger/builders/logger-runtime-configuration-builder.ts","webpack://ANT/./src/Lib/Logger/handlers/console-message-handler.ts","webpack://ANT/./src/Lib/Logger/handlers/devtools.ts","webpack://ANT/./src/Lib/Logger/logger.ts","webpack://ANT/./src/Lib/Logger/utils/ansi-color-codes.ts","webpack://ANT/./src/Lib/Logger/utils/helpers.ts","webpack://ANT/./src/Lib/Navigate/navigate.ts","webpack://ANT/./src/Lib/OData/odata.ts","webpack://ANT/./src/Lib/Odata/odata.ts","webpack://ANT/./src/Lib/Process/process.ts","webpack://ANT/./src/Lib/SOAP/common.ts","webpack://ANT/./src/Lib/SOAP/entityBase.ts","webpack://ANT/./src/Lib/SOAP/fetchKit.ts","webpack://ANT/./src/Lib/SOAP/objectType.ts","webpack://ANT/./src/Lib/SOAP/process.ts","webpack://ANT/./src/Lib/SOAP/soap.ts","webpack://ANT/./src/Lib/Utility/utility.ts","webpack://ANT/./src/Lib/Validation/validation.ts","webpack://ANT/./src/Lib/lib.ts","webpack://ANT/./src/Messages/messages.ts","webpack://ANT/./src/Webresource/webresource.ts","webpack://ANT/webpack/bootstrap","webpack://ANT/./src/index.ts"],"sourcesContent":["export namespace Constants {\r\n    export const ODataFormattedValue = '@OData.Community.Display.V1.FormattedValue';\r\n    export const ODataLookupLogicalName = '@Microsoft.Dynamics.CRM.lookuplogicalname';\r\n    export const ODataAssociatedNavigationProperty = '@Microsoft.Dynamics.CRM.associatednavigationproperty';\r\n\r\n    export enum BoundParameter {\r\n        CRUD = 'undefined',\r\n        Global = 'null',\r\n        Entity = 'entity',\r\n    }\r\n\r\n    export enum OperationType {\r\n        Action,\r\n        Function,\r\n        CRUD,\r\n    }\r\n    export enum StructuralProperty {\r\n        Unknown,\r\n        PrimitiveType,\r\n        ComplexType,\r\n        EnumerationType,\r\n        Collection,\r\n        EntityType,\r\n    }\r\n\r\n    export enum RequiredLevel {\r\n        None = 'none',\r\n        Required = 'required',\r\n        Recommended = 'recommended',\r\n    }\r\n    export enum SubmitMode {\r\n        Always = 'always',\r\n        Never = 'never',\r\n        Dirty = 'dirty',\r\n    }\r\n    export enum TabDisplayState {\r\n        Expanded = 'expanded',\r\n        Collapsed = 'collapsed',\r\n    }\r\n    export enum NotificationLevel {\r\n        ERROR = 'RECOMMENDATION',\r\n        RECOMMENDATION = 'ERROR',\r\n    }\r\n\r\n    export enum FormType {\r\n        Undefined,\r\n        Create,\r\n        Update,\r\n        ReadOnly,\r\n        Disabled,\r\n        BulkEdit,\r\n    }\r\n\r\n    export enum LogerLevel {\r\n        Warning = 100000000,\r\n        Error = 100000001,\r\n        Critical = 100000002,\r\n    }\r\n\r\n    export enum LogLevel {\r\n        None = 0,\r\n        Critical = 1 << 0,\r\n        Error = 1 << 1,\r\n        Warning = 1 << 2,\r\n        Information = 1 << 3,\r\n        Debug = 1 << 4,\r\n        Trace = 1 << 5\r\n    }\r\n\r\n    export const Logger = {\r\n        logicalName: 'ant_logger',\r\n        primaryId: 'ant_loggerid',\r\n        name: 'ant_name',\r\n        clientType: {\r\n            name: 'ant_clienttype',\r\n            value: {\r\n                web: 100000000,\r\n            },\r\n        },\r\n        logerLevel: {\r\n            name: 'ant_level',\r\n            value: {},\r\n        },\r\n        url: 'ant_url',\r\n        module: 'ant_module',\r\n        function: 'ant_functionaction',\r\n        ip: 'ant_ip',\r\n        form: 'ant_form',\r\n        entity: 'ant_entity',\r\n        entityId: 'ant_entityid',\r\n        message: 'ant_message',\r\n        trace: 'ant_trace',\r\n    };\r\n\r\n    export enum TimerControlStateEnum {\r\n        NotSet = 1,\r\n        InProgress = 2,\r\n        Warning = 3,\r\n        Violated = 4,\r\n        Success = 5,\r\n        Expired = 6,\r\n        Canceled = 7,\r\n        Paused = 8,\r\n    }\r\n\r\n\r\n    export const EmptyGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n    export type Option = { text: string; value: number };\r\n\r\n    export enum LangCode {\r\n        English = 1033,\r\n        Vietnam = 1066\r\n    }\r\n}\r\n\r\nexport enum FormType {\r\n    Undefined,\r\n    Create,\r\n    Update,\r\n    ReadOnly,\r\n    Disabled,\r\n    BulkEdit = 6,\r\n}\r\n\r\nexport const SaveOption = {\r\n    // This is the equivalent of using the Save and Close command.\r\n    SaveAndClose: 'saveandclose',\r\n    //This is the equivalent of the using the Save and New command.\r\n    SaveAndNew: 'saveandnew',\r\n};\r\n\r\nexport const SOAP_CONSTS = {\r\n    SOAP_ENDPOINT: '/XRMServices/2011/Organization.svc/web',\r\n    SOAP_ACTION: { text: 'SOAPAction', value: 'http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute' },\r\n    HTTP_METHOD: {\r\n        GET: 'GET',\r\n        POST: 'POST',\r\n        PATCH: 'PATCH',\r\n        DELETE: 'DELETE',\r\n    },\r\n    X_HTTP_Method: {\r\n        text: 'X-HTTP-Method',\r\n        value: {\r\n            DELETE: 'DELETE',\r\n            MERGE: 'MERGE',\r\n        },\r\n    },\r\n    ACCEPT_TYPE: {\r\n        text: 'Accept',\r\n        value: {\r\n            JSON: 'application/json',\r\n            XML: 'application/xml, text/xml, */*',\r\n        },\r\n    },\r\n    CONTENT_TYPE: {\r\n        text: 'Content-Type',\r\n        value: {\r\n            JSON: 'application/json; charset=utf-8',\r\n            XML: 'text/xml; charset=utf-8',\r\n        },\r\n    },\r\n    crmWebResources: {\r\n        dialog: '/webresources/c30seeds_/dialog/dialog.html',\r\n    },\r\n};\r\n\r\nexport enum SOAP_TYPE {\r\n    Bool = 'c:boolean',\r\n    Float = 'c:double',\r\n    Decimal = 'c:decimal',\r\n    Int = 'c:int',\r\n    String = 'c:string',\r\n    DateTime = 'c:dateTime',\r\n    Guid = 'c:guid',\r\n    EntityReference = 'a:EntityReference',\r\n    OptionSet = 'a:OptionSetValue',\r\n    Money = 'a:Money',\r\n    Entity = 'a:Entity',\r\n    EntityCollection = 'a:EntityCollection',\r\n}\r\n\r\nexport const $ = (window as any).$ ? (window as any).$ : (window as any).parent.$;\r\n\r\nexport const Xrm = (window.parent as any)['Xrm'];\r\n","import { Constants } from '../../../Constant/constants';\r\nimport { IAttribute } from './attribute.interface';\r\n\r\nexport class Attribute implements IAttribute {\r\n\r\n  get: () => IAttribute;\r\n\r\n  constructor(name: string) {\r\n    let _attribute = formContext.getAttribute(name);\r\n    this.get = function () {\r\n      return _attribute;\r\n    };\r\n  }\r\n\r\n  addOnChange(fn: () => void) {\r\n    try {\r\n      fn && this.get()?.addOnChange && this.get().addOnChange(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  fireOnChange() {\r\n    try {\r\n      this.get()?.fireOnChange && this.get().fireOnChange();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getAttributeType() {\r\n    try {\r\n      return this.get()?.getAttributeType && this.get().getAttributeType();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getFormat() {\r\n    try {\r\n      return this.get()?.getFormat && this.get().getFormat();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getInitialValue() {\r\n    try {\r\n      return this.get()?.getInitialValue && this.get().getInitialValue();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getIsDirty() {\r\n    try {\r\n      return this.get()?.getIsDirty && this.get().getIsDirty();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getIsPartyList() {\r\n    try {\r\n      return this.get()?.getIsPartyList && this.get().getIsPartyList();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getMax() {\r\n    try {\r\n      return this.get()?.getMax && this.get().getMax();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getMaxLength() {\r\n    try {\r\n      return this.get()?.getMaxLength && this.get().getMaxLength();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getMin() {\r\n    try {\r\n      return this.get()?.getMin && this.get().getMin();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getName() {\r\n    try {\r\n      return this.get()?.getName && this.get().getName();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getOption(option: number) {\r\n    try {\r\n      return this.get()?.getOption && this.get().getOption(option);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getOptions() {\r\n    try {\r\n      return this.get()?.getOptions && this.get().getOptions();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getParent() {\r\n    try {\r\n      return this.get()?.getParent && this.get().getParent();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getPrecision() {\r\n    try {\r\n      return this.get()?.getPrecision && this.get().getPrecision();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getRequiredLevel() {\r\n    try {\r\n      return this.get()?.getRequiredLevel && this.get().getRequiredLevel();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getSelectedOption() {\r\n    try {\r\n      return this.get()?.getSelectedOption && this.get().getSelectedOption();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getSubmitMode() {\r\n    try {\r\n      return this.get()?.getSubmitMode && this.get().getSubmitMode();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getText() {\r\n    try {\r\n      return this.get()?.getText && this.get().getText();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getUserPrivilege() {\r\n    try {\r\n      return this.get()?.getUserPrivilege && this.get().getUserPrivilege();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return;\r\n  }\r\n  getValue() {\r\n    try {\r\n      return this.get()?.getValue && this.get().getValue();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  isValid() {\r\n    try {\r\n      return this.get()?.isValid && this.get().isValid();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n    return false;\r\n  }\r\n  removeOnChange(fn: () => any) {\r\n    try {\r\n      fn && this.get()?.removeOnChange && this.get().removeOnChange(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setIsValid(bool: boolean, message: string) {\r\n    try {\r\n      this.get()?.setIsValid && this.get().setIsValid(bool, message);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setPrecision(value: number) {\r\n    try {\r\n      this.get()?.setPrecision && this.get().setPrecision(value);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setRequiredLevel(requirementLevel: Constants.RequiredLevel) {\r\n    try {\r\n      if (\r\n        requirementLevel !== Constants.RequiredLevel.None &&\r\n        requirementLevel !== Constants.RequiredLevel.Recommended &&\r\n        requirementLevel !== Constants.RequiredLevel.Required\r\n      )\r\n        return console.log('[Error]: Invalid value for RequiredLevel');\r\n      this.get()?.setRequiredLevel && this.get().setRequiredLevel(requirementLevel);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setSubmitMode(mode: Constants.SubmitMode) {\r\n    try {\r\n      if (mode !== Constants.SubmitMode.Always && mode !== Constants.SubmitMode.Dirty && mode !== Constants.SubmitMode.Never)\r\n        return console.log('[Error]: Invalid value for SubmitMode');\r\n      this.get()?.setSubmitMode && this.get().setSubmitMode(mode);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setValue(value: any) {\r\n    try {\r\n      this.get()?.setValue && this.get().setValue(value);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n}\r\n","import { Constants } from '../../Constant/constants';\r\nimport { Attribute } from './Attribute/attribute';\r\nclass Attributes {\r\n\r\n    private constructor() { }\r\n    private static _instance: Attributes;\r\n    public static getInstance() {\r\n        return this._instance || (this._instance = new this());\r\n    }\r\n\r\n    getAttribute(name: string) {\r\n        return new Attribute(name);\r\n    }\r\n\r\n    setRequiredLevels(attrs: string[], requirementLevel: Constants.RequiredLevel) {\r\n        try {\r\n            if (attrs && Array.isArray(attrs)) for (let attr of attrs) this.getAttribute(attr)?.setRequiredLevel(requirementLevel);\r\n        } catch (ex: any) {\r\n            console.log('[ERROR]: ' + ex.message);\r\n        }\r\n    }\r\n\r\n    setSubmitModes(attrs: string[], mode: Constants.SubmitMode) {\r\n        try {\r\n            if (attrs && Array.isArray(attrs)) for (let attr of attrs) this.getAttribute(attr)?.setSubmitMode(mode);\r\n        } catch (ex: any) {\r\n            console.log('[ERROR]: ' + ex.message);\r\n        }\r\n    }\r\n\r\n    clearAttributeValues(attrs: string[]) {\r\n        if (attrs && Array.isArray(attrs)) for (let attr of attrs) this.getAttribute(attr).setValue(null);\r\n    }\r\n\r\n    getAll(): any[] {\r\n        try {\r\n            if (formContext['getAttribute']) return formContext['getAttribute']();\r\n        } catch (ex: any) {\r\n            console.log('[ERROR]: ' + ex.message);\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const _Attributes = Attributes.getInstance();","import { ContextBase } from \"../contextBase\";\r\nimport { IFormContext } from \"./formContext.interface\";\r\nimport { logger } from '../../Logger/logger'\r\n\r\nexport class FormContext extends ContextBase implements IFormContext {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n  refresh(_save: boolean): Promise<{}> {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  getFormSelector(id?: string) {\r\n    try {\r\n      return this.context.ui.formSelector.items.get(id ? id : undefined);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getFormSelector\", 15)\r\n    }\r\n  }\r\n  getCurrentItem() {\r\n    try {\r\n      return this.context.ui.formSelector.getCurrentItem();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getCurrentItem\", 23)\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    try {\r\n      this.context['ui']['close']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.close\", 32)\r\n    }\r\n  }\r\n\r\n  getViewPortHeight(): any {\r\n    try {\r\n      return this.context['ui']['getViewPortHeight']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getViewPortHeight\", 41)\r\n    }\r\n  }\r\n\r\n  getViewPortWidth(): any {\r\n    try {\r\n      return this.context['ui']['getViewPortWidth']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getViewPortWidth\", 41)\r\n    }\r\n  }\r\n\r\n  getIsDirty(): any {\r\n    try {\r\n      return this.context['data']['entity']['getIsDirty']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getIsDirty\", 59)\r\n    }\r\n  }\r\n  isValid(): any {\r\n    try {\r\n      return this.context['data']['entity']['isValid']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.isValid\", 67)\r\n    }\r\n  }\r\n  save(option: string): any {\r\n    try {\r\n      return this.context['data']['entity'][\"save\"](option);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.save\", 75)\r\n    }\r\n  }\r\n  refreshData(save: boolean): any {\r\n    try {\r\n      return this.context['data'][\"refresh\"](save);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.refreshData\", 83)\r\n    }\r\n    }\r\n    refreshUI(save: boolean): any {\r\n        try {\r\n            return this.context['ui'][\"refresh\"](save);\r\n        }\r\n        catch (e: any) {\r\n            logger.Error(e.message, \"FormContext.refreshUI\", 83)\r\n        }\r\n    }\r\n  getFormType(): any {\r\n    try {\r\n      return this.context['ui']['getFormType']();\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.getFormType\", 91)\r\n    }\r\n  }\r\n  refreshRibbon(refreshAll: boolean) {\r\n    try {\r\n      this.context['ui']['refreshRibbon'](refreshAll);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.refreshRibbon\", 99)\r\n    }\r\n  }\r\n  setFormNotification(message: string, level: string, uniqueId: string): void {\r\n    try {\r\n      this.context['ui'].setFormNotification(message, level, uniqueId);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.setFormNotification\", 107)\r\n    }\r\n\r\n  }\r\n  clearFormNotification(uniqueId: string): void {\r\n    try {\r\n      this.context['ui'].clearFormNotification(uniqueId);\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.clearFormNotification\", 116)\r\n    }\r\n  }\r\n\r\n  navigation() {\r\n    try {\r\n      return this.context.ui.navigation\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.navigation\", 126)\r\n    }\r\n  }\r\n\r\n  quickForms() {\r\n    try {\r\n      return this.context.ui.quickForms\r\n    }\r\n    catch (e: any) {\r\n      logger.Error(e.message, \"FormContext.quickForms\", 126)\r\n    }\r\n  }\r\n}\r\n\r\nexport const _FormContext =  new FormContext();","import { logger } from '../../Logger/logger';\r\nimport { FormContext } from '../FormContext/formcontext';\r\nimport { IGlobalContext } from './globalContext.interface';\r\n\r\nexport class GlobalContext extends FormContext implements IGlobalContext {\r\n  userSettings: any;\r\n  client: any;\r\n  organizationSettings: any;\r\n  constructor() {\r\n    super();\r\n    this.userSettings = this.globalContext.userSettings;\r\n    this.client = this.globalContext.client;\r\n    this.organizationSettings = this.globalContext.organizationSettings;\r\n  }\r\n  getAdvancedConfigSetting(setting: string) {\r\n    try {\r\n      return this.globalContext.getAdvancedConfigSetting(setting);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getAdvancedConfigSetting');\r\n    }\r\n  }\r\n  getClientUrl(): any {\r\n    try {\r\n      return this.globalContext.getClientUrl();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getClientUrl');\r\n    }\r\n  }\r\n  getCurrentAppName(): any {\r\n    try {\r\n      return this.globalContext.getCurrentAppName();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getCurrentAppName');\r\n    }\r\n  }\r\n  getCurrentAppProperties(): any {\r\n    try {\r\n      return this.globalContext.getCurrentAppProperties();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getCurrentAppProperties');\r\n    }\r\n  }\r\n  getCurrentAppUrl(): any {\r\n    try {\r\n      return this.globalContext.getCurrentAppUrl();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getCurrentAppUrl');\r\n    }\r\n  }\r\n  getVersion(): any {\r\n    try {\r\n      return this.globalContext.getVersion();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getVersion');\r\n    }\r\n  }\r\n  getWebResourceUrl(webResourceName: string): any {\r\n    try {\r\n      return this.globalContext.getWebResourceUrl(webResourceName);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GlobalContext.getWebResourceUrl');\r\n    }\r\n  }\r\n  getClient(): 'Web' | 'Mobile' {\r\n    return this.client.getClient();\r\n  }\r\n}\r\n\r\nexport const _GlobalContext = new GlobalContext();\r\n","import { logger } from '../../Logger/logger';\nimport { ContextBase } from '../contextBase';\n\nexport class Grid extends ContextBase implements IGrid {\n  constructor() {\n    super();\n  }\n  getRrow() {\n    try {\n      return this.gridContext['getGrid']()['getRows']();\n    } catch (e: any) {\n      logger.Error(e.message, 'GlobalContext.getRrow');\n    }\n  }\n  getSelectedRows() {\n    try {\n      return this.gridContext['getGrid']()['getSelectedRows']();\n    } catch (e: any) {\n      logger.Error(e.message, 'GlobalContext.getSelectedRows');\n    }\n  }\n  getTotalRecordCount() {\n    try {\n      return this.gridContext['getGrid']()['getTotalRecordCount']();\n    } catch (e: any) {\n      logger.Error(e.message, 'GlobalContext.getTotalRecordCount');\n    }\n  }\n}\n\nexport interface IGrid {\n  getRrow(): any;\n  getSelectedRows(): any;\n  getTotalRecordCount(): any;\n}\n","import { logger } from '../../Logger/logger';\r\nimport { Grid } from './grid';\r\nimport { IGridContext } from './gridContext.interface';\r\n\r\nclass GridContext extends Grid implements IGridContext {\r\n  constructor() {\r\n    super();\r\n  }\r\n  getEntityName(): any {\r\n    try {\r\n      return this.gridContext['getEntityName']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getEntityName');\r\n    }\r\n  }\r\n  getFetchXml(): any {\r\n    try {\r\n      return this.gridContext['getFetchXml']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getFetchXml');\r\n    }\r\n  }\r\n  getGridType(): any {\r\n    try {\r\n      return this.gridContext['getGridType']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getGridType');\r\n    }\r\n  }\r\n  getRelationship() {\r\n    try {\r\n      return this.gridContext['getRelationship']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getRelationship');\r\n    }\r\n  }\r\n  getUrl(client: number): any {\r\n    try {\r\n      return this.gridContext['getUrl'](client);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getUrl');\r\n    }\r\n  }\r\n  getViewSelector() {\r\n    try {\r\n      return this.gridContext['getViewSelector']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getViewSelector');\r\n    }\r\n  }\r\n  openRelatedGrid(): void {\r\n    try {\r\n      this.gridContext['openRelatedGrid']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.openRelatedGrid');\r\n    }\r\n  }\r\n  refresh() {\r\n    try {\r\n      return this.gridContext['refresh']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.refresh');\r\n    }\r\n  }\r\n  refreshRibbon() {\r\n    try {\r\n      return this.gridContext['refreshRibbon']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.refreshRibbon');\r\n    }\r\n  }\r\n\r\n  getRrow(): any {\r\n    try {\r\n      return super.getRrow();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getRrow');\r\n    }\r\n  }\r\n  getSelectedRows(): any {\r\n    try {\r\n      return super.getSelectedRows();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getSelectedRows');\r\n    }\r\n  }\r\n  getTotalRecordCount(): any {\r\n    try {\r\n      return super.getTotalRecordCount();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'GridContext.getTotalRecordCount');\r\n    }\r\n  }\r\n}\r\n\r\nexport const _GridContext = new GridContext();\r\n","// import { // } from \"..//////\";\r\nimport { IContextBase } from \"./contextBase.interface\";\r\n\r\nexport class ContextBase implements IContextBase {\r\n    private static _context: any;\r\n    private static _globalContext: any;\r\n    private static _excutionContext: any;\r\n    private _gridContext: any;\r\n    constructor() {\r\n        ContextBase._globalContext = (window.parent as any)['Xrm']['Utility']['getGlobalContext']();\r\n    }\r\n\r\n    init(context: any, _top?: boolean): void {\r\n        try {\r\n            if (context.getFormContext) {\r\n                ContextBase._context = context.getFormContext()\r\n                ContextBase._excutionContext = ContextBase._context;\r\n                if (_top) {\r\n                    if (typeof (top as any).formContext === 'undefined') (top as any).formContext = ContextBase._context;\r\n                }\r\n                else {\r\n                    if (typeof (window as any).formContext === 'undefined') (window as any).formContext = ContextBase._context;\r\n                }\r\n            }\r\n            else {\r\n                this._gridContext = context;\r\n            }\r\n\r\n            if (typeof (top as any).consts !== 'undefined') {\r\n                if (typeof (window as any).consts === 'undefined') {\r\n                    (window as any).consts = (top as any).consts\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            //.Error(e.message, \"ContextBase.init\")\r\n        }\r\n    }\r\n\r\n    initFromPrimaryControl(primaryControl: any, _top?: boolean): void {\r\n        try {\r\n            if (typeof ContextBase._context === 'undefined') {\r\n                if (primaryControl) {\r\n                    ContextBase._context = primaryControl;\r\n                    if (_top) {\r\n                        if (typeof (top as any).formContext === 'undefined') (top as any).formContext = ContextBase._context;\r\n                    }\r\n                    else {\r\n                        if (typeof (window as any).formContext === 'undefined') (window as any).formContext = ContextBase._context;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    get getPageContext(): any {\r\n        try {\r\n            return Xrm.Utility.getPageContext();\r\n        }\r\n        catch (e) {\r\n            //.Error(e.message, \"ContextBase.getPageContext\")\r\n        }\r\n    }\r\n    get context(): any {\r\n        return ContextBase._context;\r\n    }\r\n    get globalContext(): any {\r\n        return ContextBase._globalContext;\r\n    }\r\n    get excutionContext(): any {\r\n        return ContextBase._excutionContext;\r\n    }\r\n    get gridContext(): any {\r\n        return this._gridContext\r\n    }\r\n}","import { INotification } from '../../Shared/shared.interface';\r\nimport { ControlBase } from '../control-base';\r\nimport { IControl } from './control.interface';\r\n\r\nexport class Control extends ControlBase implements IControl {\r\n    \r\n  constructor(name: string) {\r\n    let _control = formContext?.getControl(name);\r\n    super(_control);\r\n\r\n    this.get = () => {\r\n      return _control;\r\n    };\r\n  }\r\n\r\n  addCustomFilter(filter: string, entityLogicaName?: string) {\r\n    try {\r\n      this.get()?.addCustomFilter && this.get().addCustomFilter(filter, entityLogicaName);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  addCustomView(viewId: string, entityName: string, viewDisplayName: string, fetchXml: string, layoutXml: string, isDefault: boolean) {\r\n    try {\r\n      this.get()?.addCustomView && this.get().addCustomView(viewId, entityName, viewDisplayName, fetchXml, layoutXml, isDefault);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  addNotification(notification: INotification) {\r\n    try {\r\n      this.get()?.addNotification && this.get().addNotification(notification);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  addOnLookupTagClick(fn: () => void) {\r\n    try {\r\n      this.get()?.addOnLookupTagClick && this.get().addOnLookupTagClick(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  addOption(option: number, index?: number) {\r\n    try {\r\n      this.get()?.addOption && this.get().addOption(option, index);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  addPreSearch(fn: () => void) {\r\n    try {\r\n      this.get()?.addPreSearch && this.get().addPreSearch(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  clearNotification(uniqueId: string) {\r\n    try {\r\n      this.get()?.clearNotification && this.get().clearNotification(uniqueId);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  clearOptions() {\r\n    try {\r\n      this.get()?.clearOptions && this.get().clearOptions();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getAttribute() {\r\n    try {\r\n      return this.get()?.getAttribute && this.get().getAttribute();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getContentWindow(successCallback?: () => void, errorCallback?: () => void) {\r\n    try {\r\n      return this.get()?.getContentWindow && this.get().getContentWindow(successCallback, errorCallback);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getControl() {\r\n    try {\r\n      return this.get()?.getControl && this.get().getControl();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getControlType() {\r\n    try {\r\n      return this.get()?.getControlType && this.get().getControlType();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getData() {\r\n    try {\r\n      return this.get()?.getData && this.get().getData();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getDefaultView() {\r\n    try {\r\n      return this.get()?.getDefaultView && this.get().getDefaultView();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getDisabled() {\r\n    try {\r\n      return this.get()?.getDisabled && this.get().getDisabled();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getEntityTypes() {\r\n    try {\r\n      return this.get()?.getEntityTypes && this.get().getEntityTypes();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getInitialUrl() {\r\n    try {\r\n      return this.get()?.getInitialUrl && this.get().getInitialUrl();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getObject() {\r\n    try {\r\n      return this.get()?.getObject && this.get().getObject();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getOptions() {\r\n    try {\r\n      return this.get()?.getOptions && this.get().getOptions();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getSearchQuery() {\r\n    try {\r\n      return this.get()?.getSearchQuery && this.get().getSearchQuery();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getSelectedResults() {\r\n    try {\r\n      return this.get()?.getSelectedResults && this.get().getSelectedResults();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getShowTime() {\r\n    try {\r\n      return this.get()?.getShowTime && this.get().getShowTime();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getSrc() {\r\n    try {\r\n      return this.get()?.getSrc && this.get().getSrc();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getState() {\r\n    try {\r\n      return this.get()?.getState && this.get().getState();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getTotalResultCount() {\r\n    try {\r\n      return this.get()?.getTotalResultCount && this.get().getTotalResultCount();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  getValue() {\r\n    try {\r\n      return this.get()?.getValue && this.get().getValue();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  openSearchResult(resultNumber: number, mode: 'Inline' | 'Popout') {\r\n    try {\r\n      return this.get()?.openSearchResult && this.get().openSearchResult(resultNumber, mode);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  refresh() {\r\n    try {\r\n      this.get()?.refresh && this.get().refresh();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOnLookupTagClick(fn: () => void) {\r\n    try {\r\n      this.get()?.removeOnLookupTagClick && this.get().removeOnLookupTagClick(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOnPostSave(fn: () => void) {\r\n    try {\r\n      this.get()?.removeOnPostSave && this.get().removeOnPostSave(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOnPostSearch(fn: () => void) {\r\n    try {\r\n      this.get()?.removeOnPostSearch && this.get().removeOnPostSearch(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOnResultOpened(fn: () => void) {\r\n    try {\r\n      this.get()?.removeOnResultOpened && this.get().removeOnResultOpened(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOnSelection(fn: () => void) {\r\n    try {\r\n      this.get()?.removeOnSelection && this.get().removeOnSelection(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removeOption(value: number) {\r\n    try {\r\n      this.get()?.removeOption && this.get().removeOption(value);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  removePreSearch(fn: () => void) {\r\n    try {\r\n      this.get()?.removePreSearch && this.get().removePreSearch(fn);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setData(value: string) {\r\n    try {\r\n      this.get()?.setData && this.get().setData(value);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setDefaultView(viewId: string) {\r\n    try {\r\n      this.get()?.setDefaultView && this.get().setDefaultView(viewId);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setDisabled(bool: boolean) {\r\n    try {\r\n      this.get()?.setDisabled && this.get().setDisabled(bool);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setEntityTypes(entityLogicalNames: string[]) {\r\n    try {\r\n      this.get()?.setEntityTypes && this.get().setEntityTypes(entityLogicalNames);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setFocus() {\r\n    try {\r\n      this.get()?.setFocus && this.get().setFocus();\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setNotification(message: string, uniqueId: string) {\r\n    try {\r\n      this.get()?.setNotification && this.get().setNotification(message, uniqueId);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setSearchQuery(searchString: string) {\r\n    try {\r\n      this.get()?.setSearchQuery && this.get().setSearchQuery(searchString);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setShowTime(bool: boolean) {\r\n    try {\r\n      this.get()?.setShowTime && this.get().setShowTime(bool);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n  setSrc(string: string) {\r\n    try {\r\n      this.get()?.setSrc && this.get().setSrc(string);\r\n    } catch (ex: any) {\r\n      console.log('[ERROR]: ' + ex.message);\r\n    }\r\n  }\r\n}\r\n","import { ControlBase } from './../control-base';\r\nimport { ISection } from './section.interface';\r\nexport class Section extends ControlBase implements ISection { }\r\n\r\n","import { ControlBase } from '../control-base';\r\nimport { _Controls } from '../controls';\r\nimport { Section } from '../Section/section';\r\nimport { ISection } from '../Section/section.interface';\r\nimport { ITab } from './tab.interface';\r\n\r\n\r\nexport class Tab extends ControlBase implements ITab {\r\n  [name: string]: any;\r\n\r\n  constructor(name: string) {\r\n    let _tab = formContext.ui.tabs.get(name);\r\n    super(_tab);\r\n    this.get = () => {\r\n      return _tab;\r\n    };\r\n  }\r\n\r\n  addTabStateChange(fn: () => any) {\r\n    this.get()?.addTabStateChange && this.get().addTabStateChange(fn);\r\n  }\r\n\r\n  getContentType() {\r\n    return this.get()?.getContentType && this.get().getContentType();\r\n  }\r\n\r\n  getDisplayState() {\r\n    return this.get()?.getDisplayState && this.get().getDisplayState();\r\n  }\r\n\r\n  removeTabStateChange(fn: () => any) {\r\n    this.get()?.removeTabStateChange && this.get().removeTabStateChange(fn);\r\n  }\r\n  setContentType(contentType: string) {\r\n    this.get()?.setContentType && this.get().setContentType(contentType);\r\n  }\r\n\r\n  setDisplayState(state: 'expanded' | 'collapsed') {\r\n    this.get()?.setDisplayState && this.get().setDisplayState(state);\r\n  }\r\n\r\n  setFocus() {\r\n    this.get()?.setFocus && this.get().setFocus();\r\n  }\r\n\r\n  getSection(name: string) {\r\n    return this.get() && _Controls.getSection(name, this.getName());\r\n  }\r\n\r\n  getSections() {\r\n      return this.get() && _Controls.getSections(this.getName());\r\n  }\r\n}\r\n","import { IControl } from './Control/control.interface';\r\nimport { ISection } from \"./Section/section.interface\";\r\nimport { ITab } from \"./Tab/tab.interface\";\r\n\r\n\r\nexport class ControlBase implements IControlBase {\r\n  get: () => IControl | ITab | ISection | any;\r\n\r\n  constructor(control: IControl | ISection | ITab) {\r\n    let _control = control;\r\n    this.get = function(){\r\n      return _control;\r\n    } \r\n  }\r\n\r\n  getLabel() {\r\n    return this.get()?.getLabel && this.get().getLabel();\r\n  }\r\n\r\n  getName() {\r\n    return this.get()?.getName && this.get().getName();\r\n  }\r\n\r\n  getParent() {\r\n    return this.get()?.getParent && this.get().getParent();\r\n  }\r\n\r\n  getVisible() {\r\n    return this.get()?.getVisible && this.get().getVisible();\r\n  }\r\n\r\n  setLabel(label: string) {\r\n    this.get()?.setLabel && this.get().setLabel(label);\r\n  }\r\n\r\n  setVisible(bool: boolean) {\r\n    this.get()?.setVisible && this.get().setVisible(bool);\r\n  }\r\n}\r\n\r\nexport interface IControlBase {\r\n  getLabel(): string;\r\n  getName(): string;\r\n  getParent(): {};\r\n  getVisible(): boolean;\r\n  setLabel(label: string): void;\r\n  setVisible(bool: boolean): void;\r\n}\r\n","import { Control } from \"./Control/control\";\r\nimport { Tab } from \"./Tab/tab\";\r\nimport { Section } from \"./Section/section\";\r\nimport { _Navigate } from \"../Navigate/navigate\";\r\nimport { _GlobalContext } from \"../Context/GlobalContext/globalcontext\";\r\nimport { ISection } from \"./Section/section.interface\";\r\n\r\nclass Controls {\r\n  private constructor() {}\r\n  private static _instance: Controls;\r\n  public static getInstance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  /* -------------------------------------------- Control -------------------------------------------- */\r\n\r\n  getControl(name: string) {\r\n    return new Control(name);\r\n  }\r\n\r\n  getAllControls() {\r\n    return formContext?.getControl();\r\n  }\r\n\r\n  removeOnLookupTagClicks(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS)\r\n      this.getControl(controlName)?.removeOnLookupTagClick(fn);\r\n  }\r\n\r\n  removeOnPostSaves(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS) this.getControl(controlName)?.removeOnPostSave(fn);\r\n  }\r\n\r\n  removeOnPostSearchs(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS) this.getControl(controlName)?.removeOnPostSearch(fn);\r\n  }\r\n\r\n  removeOnResultOpeneds(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS) this.getControl(controlName)?.removeOnResultOpened(fn);\r\n  }\r\n\r\n  removeOnSelections(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS) this.getControl(controlName)?.removeOnSelection(fn);\r\n  }\r\n\r\n  removeOptions(options: number[], controlName: string) {\r\n    for (let option of options)\r\n      this.getControl(controlName)?.removeOption(option);\r\n  }\r\n\r\n  removePreSearchs(fnS: (() => void)[], controlName: string) {\r\n    for (let fn of fnS) this.getControl(controlName)?.removePreSearch(fn);\r\n  }\r\n\r\n  setDisableds(controlNames: string[], bool: boolean) {\r\n    for (let controlName of controlNames)\r\n      this.getControl(controlName)?.setDisabled(bool);\r\n  }\r\n\r\n  setVisibles(controlNames: string[], bool: boolean) {\r\n    for (let controlName of controlNames)\r\n      this.getControl(controlName)?.setVisible(bool);\r\n  }\r\n\r\n  setDisabledAll() {\r\n    let controls = this.getAllControls();\r\n    for (let control of controls)\r\n      if (control.getDisabled && !control.getDisabled())\r\n        control.setDisabled(true);\r\n  }\r\n\r\n  /* -------------------------------------------- Tab -------------------------------------------- */\r\n\r\n  getTab(name: string): Tab {\r\n    return new Tab(name);\r\n  }\r\n\r\n  getAllTabs(): Tab[] {\r\n    return formContext.ui.tabs.get();\r\n  }\r\n\r\n  setTabVisibles(tabNames: string[], bool: boolean) {\r\n    for (let tabName of tabNames) this.getTab(tabName).setVisible(bool);\r\n  }\r\n\r\n  /* -------------------------------------------- Section -------------------------------------------- */\r\n\r\n  getAllSections() {\r\n    let tabs = this.getAllTabs();\r\n    var sections: Section[] = [];\r\n    for (let tab of tabs) {\r\n      let _sections: ISection[] = sections.concat(\r\n        tab[\"sections\"] && tab[\"sections\"].get()\r\n      ) as ISection[];\r\n      for (let _section of _sections) {\r\n        sections.push(new Section(_section));\r\n      }\r\n    }\r\n    return sections;\r\n  }\r\n\r\n  getSection(name: string, tabName?: string): Section {\r\n    let sections: Section[] = [];\r\n    if (tabName) {\r\n      var tab = this.getTab(tabName).get();\r\n      if (tab) sections = tab[\"sections\"] && tab[\"sections\"].get();\r\n    } else {\r\n      sections = this.getAllSections();\r\n    }\r\n    return new Section(\r\n      sections.find((sec) => sec.getName() === name) as ISection\r\n    );\r\n  }\r\n\r\n  getSections(tabName?: string): Section[] {\r\n    let sections: Section[] = [];\r\n    if (tabName) {\r\n      var tab = this.getTab(tabName).get();\r\n      if (tab) {\r\n        let _sections = tab[\"sections\"] && tab[\"sections\"].get();\r\n        for (let _section of _sections) {\r\n          sections.push(new Section(_section));\r\n        }\r\n      }\r\n    } else {\r\n      sections = this.getAllSections();\r\n    }\r\n    return sections;\r\n  }\r\n\r\n  setSectionVisibles(bool: boolean, sectionNames: string[], tabName?: string) {\r\n    let sections: Section[] = [];\r\n    if (tabName) sections = this.getSections(tabName);\r\n    else sections = this.getAllSections();\r\n\r\n    for (let section of sections)\r\n      if (sectionNames.indexOf(section.getName()) > -1)\r\n        section.setVisible(bool);\r\n  }\r\n\r\n  openLookupDialog(executionContext?: any) {\r\n    executionContext.getEventArgs().preventDefault();\r\n    let lookup: IEntityReference = executionContext\r\n      .getEventArgs()\r\n      .getTagValue();\r\n    _Navigate.openFormDialog(lookup.entityType, lookup.id);\r\n  }\r\n\r\n  addOpenLookupDialog(controlName: string, onMobile: boolean = true) {\r\n    let client = _GlobalContext.getClient();\r\n    if (client === \"Mobile\" && onMobile === false) return;\r\n    this.getControl(controlName).addOnLookupTagClick(this.openLookupDialog);\r\n  }\r\n\r\n  addAllLookupOpenDialog(onMobile: boolean = true) {\r\n    let client = _GlobalContext.getClient();\r\n    if (client === \"Mobile\" && onMobile === false) return;\r\n\r\n    let controls: Control[] = this.getAllControls();\r\n    for (let control of controls) {\r\n      if (control.getControlType && control.getControlType() === \"lookup\") {\r\n        control.addOnLookupTagClick(this.openLookupDialog);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const _Controls = Controls.getInstance();\r\n","import { ContextBase } from '../Context/contextBase';\r\nimport { IEntity } from './entity.interface';\r\n\r\nclass Entity extends ContextBase implements IEntity {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getPrimaryAttributeValue(): string {\r\n        return this.context.data.entity.getPrimaryAttributeValue();\r\n    }\r\n    getDataXml(): string {\r\n        return this.context.data.entity.getDataXml();\r\n    }\r\n    getId(): string {\r\n        return this.context.data.entity.getId();\r\n    }\r\n    getEntityReference() {\r\n        this.context.data.entity.getEntityReference();\r\n    }\r\n    getEntityName(): string {\r\n        return this.context.data.entity.getEntityName();\r\n    }\r\n\r\n    getIsDirty(): boolean {\r\n        return this.context.data.entity.getIsDirty();\r\n    }\r\n    addOnSave(fn: () => void) {\r\n        this.context.data.entity.addOnSave(fn);\r\n    }\r\n\r\n    addOnLoad(fn: () => void) {\r\n        this.context.data.addOnLoad(fn);\r\n    }\r\n    removeOnSave(fn: () => void) {\r\n        this.context.data.entity.removeOnSave(fn);\r\n    }\r\n}\r\n\r\nexport const _Entity = new Entity();\r\n","import { Constants } from '../../Constant/constants';\r\nimport { _GlobalContext } from '../Context/GlobalContext/globalcontext'\r\n\r\nexport class Extensions {\r\n  constructor() {\r\n    String.prototype.toODataFormattedValue = function (): string {\r\n      var str = String(this);\r\n      if (str !== ''.trim()) return str + Constants.ODataFormattedValue;\r\n      return str;\r\n    };\r\n\r\n    String.prototype.toODataLookupId = function (): string {\r\n      var str = String(this);\r\n      if (str !== ''.trim()) return '_' + str + '_value';\r\n      return str;\r\n    };\r\n\r\n    String.prototype.toODataLookupEntityType = function (): string {\r\n      var str = String(this);\r\n      if (str !== ''.trim()) return this.toODataLookupId() + Constants.ODataLookupLogicalName;\r\n      return str;\r\n    };\r\n\r\n    String.prototype.toODataLookupName = function (): string {\r\n      var str = String(this);\r\n      if (str !== ''.trim()) return this.toODataLookupId() + Constants.ODataFormattedValue;\r\n      return str;\r\n      };\r\n\r\n    \r\n    Date.prototype.dateDiff = function (compareDate: string | Date): number {\r\n      let date1 = new Date(this.getFullYear(), this.getMonth(), this.getDate());\r\n      let date2: Date;\r\n      if (typeof compareDate === 'string') {\r\n        date2 = new Date(compareDate);\r\n        date2.setHours(0);\r\n        date2.setMinutes(0);\r\n        date2.setSeconds(0);\r\n        date2.setMilliseconds(0);\r\n      }\r\n      else date2 = new Date(compareDate.getFullYear(), compareDate.getMonth(), compareDate.getDate());\r\n\r\n      let Difference_In_Time = date1.getTime() - date2.getTime();\r\n      let Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);\r\n\r\n      return Difference_In_Days\r\n    };\r\n\r\n    (Number.prototype as any).toMoney = function (decimals: number) {\r\n      var userSettings = _GlobalContext.userSettings;\r\n      var langId = userSettings.languageId\r\n\r\n      return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND', minimumFractionDigits: 2 }).format(decimals);\r\n    };\r\n    (Number.prototype as any).toDecimal = function (decimals: number) {\r\n      new Intl.NumberFormat('vi-VN', { minimumFractionDigits: 2 }).format(decimals)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","/**\r\n * Defines logging severity levels.\r\n */\r\nexport enum LogLevel {\r\n    /**\r\n     * Not used for writing log messages. Specifies that a logging category should not write any messages.\r\n     */\r\n    None = 0,\r\n\r\n    /**\r\n     * Logs that describe an unrecoverable application or system crash,\r\n     * or a catastrophic failure that requires immediate attention.\r\n     */\r\n    Critical = 1 << 0,\r\n\r\n    /**\r\n     * Logs that highlight when the current flow of execution is stopped due to a failure.\r\n     * These should indicate a failure in the current activity, not an application-wide failure.\r\n     */\r\n    Error = 1 << 1,\r\n\r\n    /**\r\n     * Logs that highlight an abnormal or unexpected event in the application flow,\r\n     * but do not otherwise cause the application execution to stop.\r\n     */\r\n    Warning = 1 << 2,\r\n\r\n    /**\r\n     * Logs that track the general flow of the application. These logs should have long-term value.\r\n     */\r\n    Information = 1 << 3,\r\n\r\n    /**\r\n     * Logs that are used for interactive investigation during development.\r\n     * These logs should primarily contain information useful for debugging and have no long-term value.\r\n     */\r\n    Debug = 1 << 4,\r\n\r\n    /**\r\n     * Logs that contain the most detailed messages. These messages may contain sensitive application data.\r\n     * These messages are disabled by default and should never be enabled in a production environment.\r\n     */\r\n    Trace = 1 << 5\r\n}\r\n","import { LogLevel } from \"./log-level\";\r\n\r\nexport abstract class MessageHandlerBase {\r\n    public abstract HandleMessage(level: LogLevel, timestamp: number, messages: any[], module?: string, trace?: any, numline?: number): void;\r\n}\r\n","export enum PrefixType {\r\n    None = \"None\",\r\n    Short = \"Short\",\r\n    Full = \"Full\"\r\n}\r\n","import { LogLevel } from \"../abstractions/log-level\";\r\nimport { Helpers } from \"../utils/helpers\";\r\nimport { LoggerRuntimeConfigurationBuilder } from \"./logger-runtime-configuration-builder\";\r\n\r\nexport class LoggerBuilder extends LoggerRuntimeConfigurationBuilder {\r\n\r\n    /**\r\n     * Writes a log entries with specified log level.\r\n     *\r\n     * @param level Entries will be written on this level.\r\n     * @param messages Messages to be written.\r\n     * @param module function error.\r\n     * @param numline Line of code error.\r\n     */\r\n    public Log = (level: LogLevel, messages: any[], module?: string, numline?: number): number => this.log(level, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with debug log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Debug = (messages: any[], module?: string, numline?: number): number => this.log(LogLevel.Debug, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with information log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Info = (messages: any[], module?: string, numline?: number): number => this.log(LogLevel.Information, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with warning log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Warn = (messages: any[], module?: string, numline?: number): number => this.log(LogLevel.Warning, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with error log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Error = (messages: any[], module?: string, numline?: number): number => this.log(LogLevel.Error, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with critical log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Critical = (messages: any[], module?: string, numline?: number): number => this.log(LogLevel.Critical, messages, module, numline);\r\n\r\n    /**\r\n     * Write a log entries with trace log level.\r\n     *\r\n     * @param messages Messages to be written.\r\n     */\r\n    public Trace = (messages: any[]): number => this.log(LogLevel.Trace, messages);\r\n\r\n    private log(level: LogLevel, messages: any[], module?: string, numline?: number): number {\r\n        const timestamp = Date.now();\r\n        if (this.Configuration.Prefix) {\r\n            if (Array.isArray(messages))\r\n                messages = [this.Configuration.Prefix].concat(...messages);\r\n            else\r\n                messages = [this.Configuration.Prefix].concat(messages);\r\n        }\r\n\r\n        for (const handlerInstance of this.Configuration.WriteMessageHandlers) {\r\n            if (Helpers.IsLogLevelEnabled(handlerInstance.LogLevel, handlerInstance.LogLevelIsBitMask, level)) {\r\n                handlerInstance.Handler.HandleMessage(level, timestamp, messages, module, numline);\r\n            }\r\n        }\r\n\r\n        return timestamp;\r\n    }\r\n}\r\n","import { LogLevel } from \"../abstractions/log-level\";\r\nimport { InitialLoggerConfiguration, LoggerConfiguration } from \"../contracts/logger-configuration\";\r\nimport { WriteMessageHandler, WriteMessageHandlerBuilder } from \"../contracts/write-message-handler\";\r\nimport { ConsoleMessageHandler } from \"../handlers/console-message-handler\";\r\nimport { Helpers } from \"../utils/helpers\";\r\n\r\n\r\nexport class LoggerConfigurationBuilder {\r\n    constructor(initConfiguration?: Partial<InitialLoggerConfiguration>) {\r\n        this.configuration = {\r\n            ...this.defaultConfiguration(),\r\n            ...initConfiguration\r\n        };\r\n    }\r\n\r\n    private configuration: InitialLoggerConfiguration;\r\n\r\n    private defaultConfiguration(): LoggerConfiguration {\r\n        return {\r\n            WriteMessageHandlers: [],\r\n            DefaultLogLevel: {\r\n                LogLevel: LogLevel.Warning,\r\n                LogLevelIsBitMask: false\r\n            },\r\n            Prefix: undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Override configuration with new configuration object.\r\n     *\r\n     * @param configuration Partial configuration object.\r\n     */\r\n    public Override(configuration: Partial<InitialLoggerConfiguration>): this {\r\n        this.configuration = {\r\n            ...this.configuration,\r\n            ...configuration\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add write message handler.\r\n     *\r\n     * @param handler Write message handler.\r\n     * @param defaultLogLevel Default log level only for this handler.\r\n     */\r\n    public AddWriteMessageHandler(handler: WriteMessageHandlerBuilder, defaultLogLevel?: LogLevel | LogLevel[]): this {\r\n        this.AddWriteMessageHandlers([handler], defaultLogLevel);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a list of write message handlers.\r\n     *\r\n     * @param handlers Write message handlers list.\r\n     * @param defaultLogLevel Default log level only for this list of handlers.\r\n     */\r\n    public AddWriteMessageHandlers(handlers: WriteMessageHandlerBuilder[], defaultLogLevel?: LogLevel | LogLevel[]): this {\r\n        if (defaultLogLevel != null) {\r\n            const { isBitMask, value } = Helpers.ResolveLogLevel(defaultLogLevel);\r\n            handlers = handlers.map(handler => {\r\n                if (handler.LogLevel == null) {\r\n                    handler.LogLevel = value;\r\n                    handler.LogLevelIsBitMask = isBitMask;\r\n                }\r\n                return handler;\r\n            });\r\n        }\r\n        this.configuration.WriteMessageHandlers = this.configuration.WriteMessageHandlers.concat(handlers);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set logger default log level.\r\n     *\r\n     * @param logLevel LogLevel value or custom list of LogLevels.\r\n     */\r\n    public SetDefaultLogLevel(logLevel: LogLevel | LogLevel[]): this {\r\n        const { isBitMask, value } = Helpers.ResolveLogLevel(logLevel);\r\n        this.configuration.DefaultLogLevel = {\r\n            LogLevel: value,\r\n            LogLevelIsBitMask: isBitMask\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the first message in messages list.\r\n     *\r\n     * @param prefix Prefix string value.\r\n     */\r\n    public SetPrefix(prefix: string): this {\r\n        this.configuration.Prefix = prefix;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Build configuration result object.\r\n     */\r\n    public Build(): LoggerConfiguration {\r\n        let writeMessageHandlers: WriteMessageHandler[];\r\n\r\n        if (this.configuration.WriteMessageHandlers.length === 0) {\r\n            this.AddWriteMessageHandler({\r\n                Handler: new ConsoleMessageHandler(),\r\n                ...this.configuration.DefaultLogLevel\r\n            });\r\n\r\n            writeMessageHandlers = this.configuration.WriteMessageHandlers as WriteMessageHandler[];\r\n        } else {\r\n            writeMessageHandlers = this.configuration.WriteMessageHandlers.map<WriteMessageHandler>(handler => {\r\n                if (handler.LogLevel == null) {\r\n                    handler = {\r\n                        Handler: handler.Handler,\r\n                        ...this.configuration.DefaultLogLevel\r\n                    };\r\n                } else if (handler.LogLevelIsBitMask == null) {\r\n                    handler.LogLevelIsBitMask = false;\r\n                }\r\n\r\n                return handler as WriteMessageHandler;\r\n            });\r\n        }\r\n\r\n        return {\r\n            WriteMessageHandlers: writeMessageHandlers,\r\n            DefaultLogLevel: this.configuration.DefaultLogLevel,\r\n            Prefix: this.configuration.Prefix\r\n        };\r\n    }\r\n}\r\n","import { LoggerConfiguration } from \"../contracts/logger-configuration\";\r\nimport { LoggerConfigurationBuilder } from \"./logger-configuration-builder\";\r\n\r\nexport class LoggerRuntimeConfigurationBuilder {\r\n    constructor(protected Configuration: LoggerConfiguration = new LoggerConfigurationBuilder().Build()) {\r\n    }\r\n\r\n    /**\r\n     * Update existing logger configuration.\r\n     *\r\n     * @param updater Updater handler which return new configuration.\r\n     * @param setInitialConfigurationFromCurrent [default=true]\r\n     * @param setInitialConfigurationFromCurrent Set builder initial configuration from the current logger configuration.\r\n     */\r\n    public UpdateConfiguration(\r\n        updater: LoggerRuntimeConfigurationBuilder.ConfigurationUpdater,\r\n        setInitialConfigurationFromCurrent: boolean = true\r\n    ): this {\r\n        this.Configuration = updater(new LoggerConfigurationBuilder(setInitialConfigurationFromCurrent ? this.Configuration : undefined));\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport namespace LoggerRuntimeConfigurationBuilder {\r\n    export type ConfigurationUpdater = (builder: LoggerConfigurationBuilder) => LoggerConfiguration;\r\n}\r\n","import { LogLevel } from \"../abstractions/log-level\";\r\nimport { MessageHandlerBase } from \"../abstractions/message-handler-base\";\r\nimport { PrefixType } from \"../abstractions/prefix-type\";\r\nimport { LogData } from \"../contracts/log-data\";\r\nimport { ANSIColorCodes } from \"../utils/ansi-color-codes\";\r\nimport { Helpers } from \"../utils/helpers\";\r\nimport { $, Constants } from \"../../../Constant/constants\"\r\nimport { DevTool } from \"./devtools\";\r\nexport class ConsoleMessageHandler extends MessageHandlerBase {\r\n    context: any;\r\n    constructor(configuration?: Partial<ConsoleMessageHandler.Configuration>) {\r\n        super();\r\n        DevTool({ emitEvents: true })\r\n        setInterval(DevTool, 500);\r\n        this.configuration = {\r\n            ...this.defaultConfiguration,\r\n            ...configuration\r\n        };\r\n    }\r\n\r\n    private configuration: ConsoleMessageHandler.Configuration;\r\n\r\n    private get defaultConfiguration(): ConsoleMessageHandler.Configuration {\r\n        return {\r\n            LogLevelPrefix: PrefixType.Short,\r\n            TimePrefix: PrefixType.Short,\r\n            UseColors: true\r\n            // UseColors: typeof window === \"undefined\"\r\n        };\r\n    }\r\n\r\n    private resolveLogLevelPrefix(level: LogLevel, colorString: string): string | undefined {\r\n        if (level === LogLevel.Trace) {\r\n            return undefined;\r\n        }\r\n\r\n        const prefix = Helpers.ResolveLogLevelPrefix(this.configuration.LogLevelPrefix, level);\r\n        if (prefix == null) {\r\n            return undefined;\r\n        }\r\n        const colorStart = this.configuration.UseColors ? colorString : \"\";\r\n        const colorEnd = this.configuration.UseColors ? ANSIColorCodes.Reset : \"\";\r\n\r\n        return `${colorStart}${prefix}${colorEnd}`;\r\n    }\r\n\r\n    public async HandleMessage(level: LogLevel, timestamp: number, messages: any, mod?: string, numline?: string) {\r\n        let method;\r\n        let lgLevel = (ANT as any).Caching.getData('Logger');\r\n        let colorStart: string = \"\";\r\n        let isSend = false\r\n        let logerLevel = -1\r\n        switch (level) {\r\n            case LogLevel.None: {\r\n                return;\r\n            }\r\n            case LogLevel.Critical: {\r\n                method = console.error;\r\n                colorStart += ANSIColorCodes.Bright + ANSIColorCodes.FgWhite + ANSIColorCodes.BgRed;\r\n                logerLevel = Constants.LogerLevel.Critical\r\n                if (lgLevel.Critical == 1)\r\n                    isSend = true\r\n                break;\r\n            }\r\n            case LogLevel.Error: {\r\n                method = console.error;\r\n                colorStart += ANSIColorCodes.FgBlack + ANSIColorCodes.BgRed;\r\n                logerLevel = Constants.LogerLevel.Error\r\n                if (lgLevel.Error == 1)\r\n                    isSend = true\r\n                break;\r\n            }\r\n            case LogLevel.Information: {\r\n                method = console.info;\r\n                colorStart += ANSIColorCodes.FgGreen;\r\n                break;\r\n            }\r\n            case LogLevel.Warning: {\r\n                method = console.warn;\r\n                colorStart += ANSIColorCodes.Bright + ANSIColorCodes.FgYellow;\r\n                logerLevel = Constants.LogerLevel.Warning\r\n                if (lgLevel.Waring == 1)\r\n                    isSend = true\r\n                break;\r\n            }\r\n            case LogLevel.Trace: {\r\n                method = console.trace;\r\n                break;\r\n            }\r\n            case LogLevel.Debug:\r\n            default: {\r\n                method = console.log;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const prefixList: string[] = [];\r\n\r\n        const timePrefix = Helpers.ResolveTimePrefix(this.configuration.TimePrefix, timestamp);\r\n        if (timePrefix != null) {\r\n            prefixList.push(`[${timePrefix}]`);\r\n        }\r\n\r\n        const logLevelPrefix = this.resolveLogLevelPrefix(level, colorStart);\r\n        if (logLevelPrefix != null) {\r\n            prefixList.push(logLevelPrefix);\r\n        }\r\n        var mgs = {\r\n            Line: numline,\r\n            Mod: mod,\r\n            Message: (Array.isArray(messages) ? messages.join() : messages)\r\n        }\r\n        messages = JSON.stringify(mgs)\r\n        if (isSend) {\r\n            let url: string = window.location.href\r\n            let ipAddress = await $.getJSON(\"https://api.ipify.org?format=json\", function () { })\r\n            let logData: LogData = {\r\n                name: (mod ? mod + \"| \" : \"\") + (timePrefix ? timePrefix.toString() : \"\"),\r\n                url: url,\r\n                logerLevel: logerLevel,\r\n                ip: ipAddress ? ipAddress.ip : \"\",\r\n                func: mod,\r\n                entity: Xrm.Page.data.entity.getEntityName(),\r\n                entityId: Xrm.Page.data.entity.getId(),\r\n                message: messages\r\n            }\r\n            if (Xrm != null && Xrm.Page.ui != null)\r\n                logData.form = Xrm.Page.ui.formSelector.getCurrentItem().getLabel();\r\n\r\n            if (Xrm != null && Xrm.Page.data != null) {\r\n                logData.entity = Xrm.Page.data.entity.getEntityName()\r\n                logData.entityId = Xrm.Page.data.entity.getId()\r\n            }\r\n\r\n            Helpers.Send(logData)\r\n        }\r\n        if ((window as any).devtools.isOpen) {\r\n            if (prefixList.length > 0) {\r\n                const prefixString = prefixList.join(\" \");\r\n                method(`${prefixString}: `, messages);\r\n            } else {\r\n                method(messages);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ConsoleMessageHandler {\r\n    export interface Configuration {\r\n        LogLevelPrefix: PrefixType | keyof typeof PrefixType;\r\n        TimePrefix: PrefixType | keyof typeof PrefixType;\r\n        UseColors: boolean;\r\n    }\r\n}\r\n\r\n","const devtools = {\n    isOpen: false,\n    orientation: undefined\n};\n\nconst threshold = 160;\n\nconst emitEvent = (isOpen: boolean, orientation: any) => {\n    (top?.window as any).dispatchEvent(new CustomEvent('devtoolschange', {\n        detail: {\n            isOpen,\n            orientation\n        }\n    }));\n};\n\n\nexport const DevTool = ({ emitEvents = true } = {}) => {\n    const widthThreshold = (top?.window as any).outerWidth - (top?.window as any).innerWidth > threshold;\n    const heightThreshold = (top?.window as any).outerHeight - (top?.window as any).innerHeight > threshold;\n    const orientation: any = widthThreshold ? 'vertical' : 'horizontal';\n    if (\n        !(heightThreshold && widthThreshold) &&\n        (((top?.window as any).Firebug && (top?.window as any).Firebug.chrome && (top?.window as any).Firebug.chrome.isInitialized) || widthThreshold || heightThreshold)\n    ) {\n        if ((!devtools.isOpen || devtools.orientation !== orientation) && emitEvents) {\n            emitEvent(true, orientation);\n        }\n\n        devtools.isOpen = true;\n        devtools.orientation = orientation;\n    } else {\n        if (devtools.isOpen && emitEvents) {\n            emitEvent(false, undefined);\n        }\n\n        devtools.isOpen = false;\n        devtools.orientation = undefined;\n    }\n    (window as any).devtools = devtools\n};\n","import { LogLevel } from \"./abstractions/log-level\";\r\nimport { LoggerBuilder } from \"./builders/logger-builder\";\r\nimport { ConsoleMessageHandler } from \"./handlers/console-message-handler\";\r\n\r\nexport const logger = new LoggerBuilder({\r\n    DefaultLogLevel: {\r\n        LogLevel: LogLevel.Trace,\r\n        LogLevelIsBitMask: false,\r\n    },\r\n    // Prefix: \"ANT\",\r\n    WriteMessageHandlers: [{\r\n        Handler: new ConsoleMessageHandler(),\r\n        LogLevel: LogLevel.Critical | LogLevel.Debug | LogLevel.Information | LogLevel.Warning | LogLevel.Error | LogLevel.Trace,\r\n        LogLevelIsBitMask: true\r\n    }]\r\n});\r\n\r\nexport const LogerLevel = LogLevel\r\n\r\n","export enum ANSIColorCodes {\r\n    Reset = \"\\x1b[0m\",\r\n    Bright = \"\\x1b[1m\",\r\n    Dim = \"\\x1b[2m\",\r\n    Underscore = \"\\x1b[4m\",\r\n    Blink = \"\\x1b[5m\",\r\n    Reverse = \"\\x1b[7m\",\r\n    Hidden = \"\\x1b[8m\",\r\n\r\n    FgBlack = \"\\x1b[30m\",\r\n    FgRed = \"\\x1b[31m\",\r\n    FgGreen = \"\\x1b[32m\",\r\n    FgYellow = \"\\x1b[33m\",\r\n    FgBlue = \"\\x1b[34m\",\r\n    FgMagenta = \"\\x1b[35m\",\r\n    FgCyan = \"\\x1b[36m\",\r\n    FgWhite = \"\\x1b[37m\",\r\n\r\n    BgBlack = \"\\x1b[40m\",\r\n    BgRed = \"\\x1b[41m\",\r\n    BgGreen = \"\\x1b[42m\",\r\n    BgYellow = \"\\x1b[43m\",\r\n    BgBlue = \"\\x1b[44m\",\r\n    BgMagenta = \"\\x1b[45m\",\r\n    BgCyan = \"\\x1b[46m\",\r\n    BgWhite = \"\\x1b[47m\"\r\n}\r\n","import { LogLevel } from \"../abstractions/log-level\";\r\nimport { PrefixType } from \"../abstractions/prefix-type\";\r\nimport { Constants } from \"../../../Constant/constants\";\r\nimport { LogData } from \"../contracts/log-data\";\r\nimport { Xrm } from \"../../../Constant/constants\";\r\n\r\n\r\nexport namespace Helpers {\r\n    /**\r\n     * Check if running on server side environment.\r\n     */\r\n    export function IsServerSide(): boolean {\r\n        return typeof process !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * Return short name of log level.\r\n     *\r\n     * @param logLevel Log level value.\r\n     */\r\n    export function GetLogLevelShortString(logLevel: LogLevel): string {\r\n        switch (logLevel) {\r\n            case LogLevel.Critical:\r\n                return \"crit\";\r\n            case LogLevel.Error:\r\n                return \"erro\";\r\n            case LogLevel.Warning:\r\n                return \"warn\";\r\n            case LogLevel.Information:\r\n                return \"info\";\r\n            case LogLevel.Debug:\r\n                return \"dbug\";\r\n            case LogLevel.Trace:\r\n                return \"trce\";\r\n            case LogLevel.None:\r\n            default:\r\n                return \"none\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return full name of log level.\r\n     *\r\n     * @param logLevel Log level value.\r\n     */\r\n    export function GetLogLevelString(logLevel: LogLevel): string {\r\n        return LogLevel[logLevel].toString();\r\n    }\r\n\r\n    /**\r\n     * Resolve and calculate log level details.\r\n     *\r\n     * @param logLevels Log level value or list of log level values.\r\n     */\r\n    export function ResolveLogLevel(logLevels: LogLevel | LogLevel[]): { value: LogLevel, isBitMask: boolean } {\r\n        if (typeof logLevels === \"number\") {\r\n            return {\r\n                value: logLevels,\r\n                isBitMask: false\r\n            };\r\n        } else {\r\n            return {\r\n                value: CalculateLogLevelsBitMaskValue(logLevels),\r\n                isBitMask: true\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate log level bit mask value.\r\n     *\r\n     * @param logLevels List of log levels.\r\n     */\r\n    export function CalculateLogLevelsBitMaskValue(logLevels: LogLevel[]): LogLevel {\r\n        let logLevel = LogLevel.None;\r\n        for (const level of logLevels) {\r\n            logLevel |= level;\r\n        }\r\n\r\n        return logLevel;\r\n    }\r\n\r\n    /**\r\n     * Check if log level is enabled in handler.\r\n     *\r\n     * @param currentLogLevel Handler current log level.\r\n     * @param currentLogLevelIsBitMask Handler current log level bit mask value.\r\n     * @param targetLogLevel Checking log level value.\r\n     */\r\n    export function IsLogLevelEnabled(currentLogLevel: LogLevel, currentLogLevelIsBitMask: boolean, targetLogLevel: LogLevel): boolean {\r\n        return currentLogLevelIsBitMask ?\r\n            ((currentLogLevel & targetLogLevel) === targetLogLevel) :\r\n            (currentLogLevel >= targetLogLevel);\r\n    }\r\n\r\n    /**\r\n     * Resolve log level string prefix by prefix type.\r\n     *\r\n     * @param prefixType Prefix type enum value or string.\r\n     * @param logLevel Current log level.\r\n     */\r\n    export function ResolveLogLevelPrefix(prefixType: PrefixType | keyof typeof PrefixType, logLevel: LogLevel): string | undefined {\r\n        switch (prefixType) {\r\n            case PrefixType.None:\r\n                return undefined;\r\n            case PrefixType.Short:\r\n                return GetLogLevelShortString(logLevel);\r\n            case PrefixType.Full:\r\n                return GetLogLevelString(logLevel);\r\n            default: return\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resolve date string by prefix type.\r\n     *\r\n     * @param prefixType Prefix type enum value or string.\r\n     * @param timestamp Timestamp to resolve.\r\n     */\r\n    export function ResolveTimePrefix(prefixType: PrefixType | keyof typeof PrefixType, timestamp: number): string | undefined {\r\n        switch (prefixType) {\r\n            case PrefixType.None:\r\n                return undefined;\r\n            case PrefixType.Short:\r\n                return new Date(timestamp).toLocaleTimeString();\r\n            case PrefixType.Full:\r\n                return new Date(timestamp).toLocaleString();\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    export const Send = (logdata: LogData) => {\r\n        try {\r\n            let cre_logger: any = {}\r\n            cre_logger[Constants.Logger.clientType.name] = Constants.Logger.clientType.value.web\r\n            cre_logger[Constants.Logger.name] = logdata.name\r\n            cre_logger[Constants.Logger.url] = logdata.url\r\n            cre_logger[Constants.Logger.ip] = logdata.ip\r\n            cre_logger[Constants.Logger.logerLevel.name] = logdata.logerLevel\r\n            cre_logger[Constants.Logger.module] = logdata.module\r\n            cre_logger[Constants.Logger.function] = logdata.func\r\n            cre_logger[Constants.Logger.form] = logdata.form\r\n            cre_logger[Constants.Logger.entity] = logdata.entity\r\n            cre_logger[Constants.Logger.entityId] = logdata.entityId\r\n            cre_logger[Constants.Logger.message] = logdata.message\r\n            cre_logger[Constants.Logger.trace] = logdata.trace\r\n\r\n            Xrm.WebApi.createRecord(Constants.Logger.logicalName, cre_logger).then(\r\n                function () {\r\n\r\n                },\r\n                function () {\r\n                    alert(\"Some thing error!\")\r\n                });\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","import { IAlertStrings } from './DialogStrings/alert-strings.interface';\r\nimport { IConfirmStrings } from './DialogStrings/confirm-strings.interface';\r\nimport { IEntityFormOptions } from './EntityFormOptions/entity-form-options.interface';\r\nimport { IErrorOptions, IFile, INavigate, IWindowOptions } from './navigate.interface';\r\nimport { INavigationOptions } from './NavigationOptions/navigation-options.interface';\r\nimport { IPageInput } from './PageInput/page-input.interface';\r\n\r\nclass Navigate implements INavigate {\r\n  private constructor() {}\r\n  private static _instance: Navigate;\r\n  public static getInstance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  async navigateTo(pageInput: IPageInput, navigationOptions?: INavigationOptions, successCallback?: () => void) {\r\n    let navigateTo = await Xrm.Navigation.navigateTo(pageInput, navigationOptions);\r\n    if (successCallback) successCallback();\r\n    return navigateTo;\r\n  }\r\n\r\n  async openAlertDialog(alertStrings: IAlertStrings, alertOptions?: IWindowOptions, closeCallback?: () => void): Promise<any> {\r\n    var openAlertDialog = await Xrm.Navigation.openAlertDialog(alertStrings, alertOptions);\r\n\r\n    if (closeCallback) closeCallback();\r\n    return openAlertDialog;\r\n  }\r\n  async openConfirmDialog(confirmStrings: IConfirmStrings, confirmOptions?: IWindowOptions, confirmCallback?: () => void, closeCallback?: () => void): Promise<any> {\r\n    var openAlertDialog = await Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions);\r\n    if (openAlertDialog.confirmed) {\r\n      if (confirmCallback) confirmCallback();\r\n    } else {\r\n      if (closeCallback) closeCallback();\r\n    }\r\n    return openAlertDialog;\r\n  }\r\n\r\n  async openErrorDialog(errorOptions: IErrorOptions, successCallback?: () => void): Promise<any> {\r\n    var openAlertDialog = await Xrm.Navigation.openErrorDialog(errorOptions);\r\n    if (successCallback) successCallback();\r\n    return openAlertDialog;\r\n  }\r\n\r\n  openFile(file: IFile, openFileOptions: { openMode: 1 | 2 }): void {\r\n    Xrm.Navigation.openFile(file, openFileOptions);\r\n  }\r\n\r\n  async openForm(entityFormOptions: IEntityFormOptions, formParameters: {}, successCallback?: () => void): Promise<any> {\r\n    var openForm = await Xrm.Navigation.openForm(entityFormOptions, formParameters);\r\n    if (successCallback) successCallback();\r\n    return openForm;\r\n  }\r\n\r\n  openUrl(url: string, openUrlOptions: IWindowOptions): void {\r\n    Xrm.Navigation.openUrl(url, openUrlOptions);\r\n  }\r\n\r\n  openWebResource(webResourceName: string, windowOptions: IWindowOptions, data: string): void {\r\n    Xrm.Navigation.openWebResource(webResourceName, windowOptions, data);\r\n  }\r\n\r\n  async openWebResourceDialog(webresourceName: string, data?: string, title?: string, height?: number, width?: number, position?: 1 | 2): Promise<any> {\r\n    let pageInput = <IPageInput>{};\r\n    pageInput.pageType = 'webresource';\r\n    pageInput.webresourceName = webresourceName;\r\n\r\n    if (data) pageInput.data = data;\r\n\r\n    var navigationOptions: INavigationOptions = <INavigationOptions>{};\r\n    navigationOptions.target = 2;\r\n    if (height) navigationOptions.height = height;\r\n    if (width) navigationOptions.width = width;\r\n    if (position) navigationOptions.position = position;\r\n    if (title) navigationOptions.title = title;\r\n    let openWebResourceDialog = await this.navigateTo(pageInput, navigationOptions);\r\n    return openWebResourceDialog;\r\n  }\r\n\r\n  async openView(entityName: string, viewId?: string, viewType?: 'savedquery' | 'userquery', navigationOptions?: INavigationOptions, callback?: () => void): Promise<any> {\r\n    let pageInput = <IPageInput>{};\r\n    pageInput.pageType = 'entitylist';\r\n    pageInput.entityName = entityName;\r\n    if (viewId) pageInput.viewId = viewId;\r\n    if (viewType) pageInput.viewType = viewType;\r\n\r\n    let openView = await this.navigateTo(pageInput, navigationOptions);\r\n    if (callback) return callback();\r\n    return openView;\r\n  }\r\n\r\n  async openDashboard(dashboardId?: string, navigationOptions?: INavigationOptions, callback?: () => void): Promise<any> {\r\n    let pageInput = <IPageInput>{};\r\n    pageInput.pageType = 'dashboard';\r\n    if (dashboardId) pageInput.dashboardId = dashboardId;\r\n\r\n    let openView = await this.navigateTo(pageInput, navigationOptions);\r\n    if (callback) callback();\r\n\r\n    return openView;\r\n  }\r\n\r\n  async openFormDialog(entityName: string, entityId?: string, height?: number, width?: number, position?: 1 | 2): Promise<any> {\r\n    let pageInput = <IPageInput>{};\r\n    pageInput.pageType = 'entityrecord';\r\n    pageInput.entityName = entityName;\r\n    if (entityId) pageInput.entityId = entityId;\r\n\r\n    var navigationOptions: INavigationOptions = <INavigationOptions>{};\r\n    navigationOptions.target = 2;\r\n    if (height) navigationOptions.height = height;\r\n    if (width) navigationOptions.width = width;\r\n    if (position) navigationOptions.position = position;\r\n\r\n    let openFormDialog = await this.navigateTo(pageInput, navigationOptions);\r\n    return openFormDialog;\r\n  }\r\n}\r\n\r\nexport let _Navigate = Navigate.getInstance();\r\n","import { Utilities } from '../Utility/utility';\r\nimport { _Validation } from '../Validation/validation';\r\nimport { Constants } from './../../Constant/constants';\r\n\r\nclass OData {\r\n  private constructor() {}\r\n  private static _instance: OData;\r\n  public static getInstance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  associateRecords = async (target: { entityType: string; id: string }, relatedEntities: { entityType: string; id: string }[], relationship: string): Promise<any> => {\r\n    relatedEntities.forEach((_) => (_.id = Utilities.removeBrackets(_.id)));\r\n    let request: any = { target, relatedEntities, relationship };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Global,\r\n        parameterTypes: {},\r\n        operationType: Constants.OperationType.CRUD,\r\n        operationName: 'Associate',\r\n      };\r\n    };\r\n    let associateRecords = await this.execute(request);\r\n    return associateRecords;\r\n  };\r\n\r\n  callWorkflow = async (entityId: string, workflowId: string): Promise<any> => {\r\n    let request: any = {};\r\n    request.EntityId = { guid: entityId };\r\n    request.entity = {\r\n      id: workflowId,\r\n      entityType: 'workflow',\r\n    };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Entity,\r\n        parameterTypes: {\r\n          entity: {\r\n            typeName: 'Microsoft.Dynamics.CRM.Workflow',\r\n            structuralProperty: Constants.StructuralProperty.EntityType,\r\n          },\r\n          EntityId: {\r\n            typeName: 'Edm.Guid',\r\n            structuralProperty: Constants.StructuralProperty.PrimitiveType,\r\n          },\r\n        },\r\n        operationType: Constants.OperationType.Action,\r\n        operationName: 'ExecuteWorkflow',\r\n      };\r\n    };\r\n\r\n    let callWorkFlow = await this.execute(request);\r\n    return callWorkFlow;\r\n  };\r\n\r\n  createRecord = async (entityLogicalName: string, data: {}, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.createRecord(entityLogicalName, data).then(successCallback, errorCallback)) || Xrm.WebApi.createRecord(entityLogicalName, data);\r\n\r\n  deleteRecord = async (entityLogicalName: string, id: string, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.deleteRecord(entityLogicalName, id).then(successCallback, errorCallback)) || Xrm.WebApi.deleteRecord(entityLogicalName, id);\r\n\r\n  disassociateRecord = async (target: { entityType: string; id: string }, relatedEntityId: string, relationship: string): Promise<any> => {\r\n    let disassociateRecord = await this.execute(this.initDisassociateRequest(target, Utilities.removeBrackets(relatedEntityId), relationship));\r\n    return disassociateRecord;\r\n  };\r\n\r\n  disassociateRecords = async (target: { entityType: string; id: string }, relatedEntityIds: string[], relationship: string): Promise<any> => {\r\n    var changeSet = [];\r\n    for (let relatedEntityId of relatedEntityIds) {\r\n      changeSet.push(this.initDisassociateRequest(target, Utilities.removeBrackets(relatedEntityId), relationship));\r\n    }\r\n    let requests = [changeSet];\r\n\r\n    let disassociateRecords = await this.executeMultiple(requests);\r\n    return disassociateRecords;\r\n  };\r\n\r\n  execute = async (request: any, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.online.execute(request).then(successCallback, errorCallback)) || Xrm.WebApi.online.execute(request);\r\n\r\n  executeMultiple = async (requests: any[], successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.online.executeMultiple(requests).then(successCallback, errorCallback)) || Xrm.WebApi.online.executeMultiple(requests);\r\n\r\n  initDisassociateRequest = (target: { entityType: string; id: string }, relatedEntityId: string, relationship: string): any => {\r\n    let request: any = { target, relatedEntityId: Utilities.removeBrackets(relatedEntityId), relationship };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Global,\r\n        parameterTypes: {},\r\n        operationType: Constants.OperationType.CRUD,\r\n        operationName: 'Disassociate',\r\n      };\r\n    };\r\n    return request;\r\n  };\r\n\r\n  retrieveRecord = async (entityLogicalName: string, id: string, options?: string, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.retrieveRecord(entityLogicalName, Utilities.removeBrackets(id), options).then(successCallback, errorCallback)) ||\r\n    Xrm.WebApi.retrieveRecord(entityLogicalName, id, options);\r\n\r\n  retrieveMultipleRecords = async (entityLogicalName: string, options: string, maxPageSize?: number | null, successCallback?: () => void, errorCallback?: () => void): Promise<any> => {\r\n    if (_Validation.isFetchXml(options)) options = '?fetchXml=' + options;\r\n    return (\r\n      (successCallback && Xrm.WebApi.retrieveMultipleRecords(entityLogicalName, options, maxPageSize).then(successCallback, errorCallback)) ||\r\n      Xrm.WebApi.retrieveMultipleRecords(entityLogicalName, options, maxPageSize)\r\n    );\r\n  };\r\n\r\n  retrievePageFetchXml = async (\r\n    entityLogicalName: string,\r\n    fetchXml: string,\r\n    pageNumber: number,\r\n    count: number,\r\n    pagingCookie: string,\r\n    successCallback?: () => void,\r\n    errorCallback?: () => void\r\n  ): Promise<any> => {\r\n    if (!fetchXml || typeof fetchXml !== 'string') return console.log('[Error]: Invalid XML');\r\n\r\n    var fetchXml = '?fetchXml=' + Utilities.createFetchXml(fetchXml, pagingCookie, pageNumber, count);\r\n\r\n    return this.retrieveMultipleRecords(entityLogicalName, fetchXml, null, successCallback, errorCallback);\r\n  };\r\n\r\n  retrieveAllRecordsFetchXml = async (entityLogicalName: string, fetchXml: string, count: number): Promise<any> => {\r\n    if (!fetchXml || typeof fetchXml !== 'string') return console.log('[Error]: Invalid XML');\r\n    var page = 1;\r\n\r\n    var entities: any[] = [];\r\n    var pagingCookie = null;\r\n\r\n    do {\r\n      var result: any = await this.retrievePageFetchXml(entityLogicalName, fetchXml, page, count, pagingCookie);\r\n      if (result) entities = entities.concat(result.entities);\r\n\r\n      pagingCookie = result.fetchXmlPagingCookie;\r\n      page++;\r\n    } while (result.fetchXmlPagingCookie);\r\n\r\n    return entities;\r\n  };\r\n\r\n  setStateReocord = async (entityLogicalName: string, id: string, statecode: number, statuscode: number, successCallback?: () => void, errorCallback?: () => void): Promise<any> => {\r\n    return await this.updateRecord(entityLogicalName, Utilities.removeBrackets(id), { statecode, statuscode }, successCallback, errorCallback);\r\n  };\r\n\r\n  updateRecord = async (entityLogicalName: string, id: string, data: {}, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.updateRecord(entityLogicalName, Utilities.removeBrackets(id), data).then(successCallback, errorCallback)) || Xrm.WebApi.updateRecord(entityLogicalName, id, data);\r\n\r\n  doRequest = (action: string, uri: string, data?: {}): Promise<any> => {\r\n    if (!RegExp(action, 'g').test('POST PATCH PUT GET DELETE')) {\r\n      // Expected action verbs.\r\n      throw new Error('Request: action parameter must be one of the following: ' + 'POST, PATCH, PUT, GET, or DELETE.');\r\n    }\r\n    if (typeof uri !== 'string') {\r\n      throw new Error('Request: uri parameter must be a string.');\r\n    }\r\n    if (RegExp(action, 'g').test('PATCH PUT') && (data === null || data === undefined)) {\r\n      throw new Error('Request: data parameter must not be null for operations that create or modify data.');\r\n    }\r\n\r\n    // Construct a fully qualified URI if a relative URI is passed in.\r\n    if (uri.charAt(0) === '/') {\r\n      uri = Xrm.Utility.getGlobalContext().getClientUrl() + '/api/data/v9.1' + uri;\r\n    }\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      var request = new XMLHttpRequest();\r\n      request.open(action, encodeURI(uri), true);\r\n      request.setRequestHeader('OData-MaxVersion', '4.0');\r\n      request.setRequestHeader('OData-Version', '4.0');\r\n      request.setRequestHeader('Accept', 'application/json');\r\n      request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\r\n      request.onreadystatechange = function () {\r\n        if (this.readyState === 4) {\r\n          request.onreadystatechange = null;\r\n          switch (this.status) {\r\n            case 200: // Success with content returned in response body.\r\n            case 204: // Success with no content returned in response body.\r\n              resolve(this);\r\n              break;\r\n            default:\r\n              // All other statuses are unexpected so are treated like errors.\r\n              var error;\r\n              try {\r\n                error = JSON.parse(request.response).error;\r\n              } catch (e: any) {\r\n                error = new Error(e);\r\n              }\r\n              reject(error);\r\n              break;\r\n          }\r\n        }\r\n      };\r\n      request.send(JSON.stringify(data));\r\n    });\r\n  };\r\n\r\n  getFileColumn(entityset: string, id: string, field: string): Promise<any> {\r\n    if (!entityset) throw new Error('entityset parameter must not be null ');\r\n    if (!id) throw new Error('id parameter must not be null ');\r\n    if (!field) throw new Error('field parameter must not be null ');\r\n\r\n    let action = 'GET';\r\n    let uri = `/${entityset}(${Utilities.removeBrackets(id)})/${field}/$value`;\r\n\r\n    return this.doRequest(action, uri);\r\n  }\r\n\r\n  callAction = async (entityName: string, id: string, actionName: string, data: any): Promise<any> => {\r\n    let uri = '/';\r\n    if (typeof actionName !== 'string' || actionName === '') throw new Error('actionName parameter is invalid.');\r\n\r\n    if (entityName) {\r\n      let entityMetadata = await Utilities.getEntityMetadata(entityName);\r\n      if (entityMetadata !== null && entityName !== entityMetadata.EntitySetName) entityName = entityMetadata.EntitySetName;\r\n\r\n      uri += entityName;\r\n      if (id) uri += `(${id})`;\r\n      uri += '/' + (actionName.startsWith('Microsoft.Dynamics.CRM.') ? actionName : 'Microsoft.Dynamics.CRM.' + actionName);\r\n    } else uri += actionName;\r\n\r\n    let callAction = await this.doRequest('POST', uri, data);\r\n    return callAction;\r\n  };\r\n}\r\n\r\nexport const _OData = OData.getInstance();\r\n","import { Utilities } from '../Utility/utility';\r\nimport { _Validation } from '../Validation/validation';\r\nimport { Constants } from './../../Constant/constants';\r\n\r\nclass OData {\r\n  private constructor() {}\r\n  private static _instance: OData;\r\n  public static getInstance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  associateRecords = async (target: { entityType: string; id: string }, relatedEntities: { entityType: string; id: string }[], relationship: string): Promise<any> => {\r\n    relatedEntities.forEach((_) => (_.id = Utilities.removeBrackets(_.id)));\r\n    let request: any = { target, relatedEntities, relationship };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Global,\r\n        parameterTypes: {},\r\n        operationType: Constants.OperationType.CRUD,\r\n        operationName: 'Associate',\r\n      };\r\n    };\r\n    let associateRecords = await this.execute(request);\r\n    return associateRecords;\r\n  };\r\n\r\n  callWorkflow = async (entityId: string, workflowId: string): Promise<any> => {\r\n    let request: any = {};\r\n    request.EntityId = { guid: entityId };\r\n    request.entity = {\r\n      id: workflowId,\r\n      entityType: 'workflow',\r\n    };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Entity,\r\n        parameterTypes: {\r\n          entity: {\r\n            typeName: 'Microsoft.Dynamics.CRM.Workflow',\r\n            structuralProperty: Constants.StructuralProperty.EntityType,\r\n          },\r\n          EntityId: {\r\n            typeName: 'Edm.Guid',\r\n            structuralProperty: Constants.StructuralProperty.PrimitiveType,\r\n          },\r\n        },\r\n        operationType: Constants.OperationType.Action,\r\n        operationName: 'ExecuteWorkflow',\r\n      };\r\n    };\r\n\r\n    let callWorkFlow = await this.execute(request);\r\n    return callWorkFlow;\r\n  };\r\n\r\n  createRecord = async (entityLogicalName: string, data: {}, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.createRecord(entityLogicalName, data).then(successCallback, errorCallback)) || Xrm.WebApi.createRecord(entityLogicalName, data);\r\n\r\n  deleteRecord = async (entityLogicalName: string, id: string, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.deleteRecord(entityLogicalName, id).then(successCallback, errorCallback)) || Xrm.WebApi.deleteRecord(entityLogicalName, id);\r\n\r\n  disassociateRecord = async (target: { entityType: string; id: string }, relatedEntityId: string, relationship: string): Promise<any> => {\r\n    let disassociateRecord = await this.execute(this.initDisassociateRequest(target, Utilities.removeBrackets(relatedEntityId), relationship));\r\n    return disassociateRecord;\r\n  };\r\n\r\n  disassociateRecords = async (target: { entityType: string; id: string }, relatedEntityIds: string[], relationship: string): Promise<any> => {\r\n    var changeSet = [];\r\n    for (let relatedEntityId of relatedEntityIds) {\r\n      changeSet.push(this.initDisassociateRequest(target, Utilities.removeBrackets(relatedEntityId), relationship));\r\n    }\r\n    let requests = [changeSet];\r\n\r\n    let disassociateRecords = await this.executeMultiple(requests);\r\n    return disassociateRecords;\r\n  };\r\n\r\n  execute = async (request: any, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.online.execute(request).then(successCallback, errorCallback)) || Xrm.WebApi.online.execute(request);\r\n\r\n  executeMultiple = async (requests: any[], successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.online.executeMultiple(requests).then(successCallback, errorCallback)) || Xrm.WebApi.online.executeMultiple(requests);\r\n\r\n  initDisassociateRequest = (target: { entityType: string; id: string }, relatedEntityId: string, relationship: string): any => {\r\n    let request: any = { target, relatedEntityId: Utilities.removeBrackets(relatedEntityId), relationship };\r\n    request.getMetadata = function () {\r\n      return {\r\n        boundParameter: Constants.BoundParameter.Global,\r\n        parameterTypes: {},\r\n        operationType: Constants.OperationType.CRUD,\r\n        operationName: 'Disassociate',\r\n      };\r\n    };\r\n    return request;\r\n  };\r\n\r\n  retrieveRecord = async (entityLogicalName: string, id: string, options?: string, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.retrieveRecord(entityLogicalName, Utilities.removeBrackets(id), options).then(successCallback, errorCallback)) ||\r\n    Xrm.WebApi.retrieveRecord(entityLogicalName, id, options);\r\n\r\n  retrieveMultipleRecords = async (entityLogicalName: string, options: string, maxPageSize?: number | null, successCallback?: () => void, errorCallback?: () => void): Promise<any> => {\r\n    if (_Validation.isFetchXml(options)) options = '?fetchXml=' + options;\r\n    return (\r\n      (successCallback && Xrm.WebApi.retrieveMultipleRecords(entityLogicalName, options, maxPageSize).then(successCallback, errorCallback)) ||\r\n      Xrm.WebApi.retrieveMultipleRecords(entityLogicalName, options, maxPageSize)\r\n    );\r\n  };\r\n\r\n  retrievePageFetchXml = async (\r\n    entityLogicalName: string,\r\n    fetchXml: string,\r\n    pageNumber: number,\r\n    count: number,\r\n    pagingCookie: string,\r\n    successCallback?: () => void,\r\n    errorCallback?: () => void\r\n  ): Promise<any> => {\r\n    if (!fetchXml || typeof fetchXml !== 'string') return console.log('[Error]: Invalid XML');\r\n\r\n    var fetchXml = '?fetchXml=' + Utilities.createFetchXml(fetchXml, pagingCookie, pageNumber, count);\r\n\r\n    return this.retrieveMultipleRecords(entityLogicalName, fetchXml, null, successCallback, errorCallback);\r\n  };\r\n\r\n  retrieveAllRecordsFetchXml = async (entityLogicalName: string, fetchXml: string, count: number): Promise<any> => {\r\n    if (!fetchXml || typeof fetchXml !== 'string') return console.log('[Error]: Invalid XML');\r\n    var page = 1;\r\n\r\n    var entities: any[] = [];\r\n    var pagingCookie = null;\r\n\r\n    do {\r\n      var result: any = await this.retrievePageFetchXml(entityLogicalName, fetchXml, page, count, pagingCookie);\r\n      if (result) entities = entities.concat(result.entities);\r\n\r\n      pagingCookie = result.fetchXmlPagingCookie;\r\n      page++;\r\n    } while (result.fetchXmlPagingCookie);\r\n\r\n    return entities;\r\n  };\r\n\r\n  setStateReocord = async (entityLogicalName: string, id: string, statecode: number, statuscode: number, successCallback?: () => void, errorCallback?: () => void): Promise<any> => {\r\n    return await this.updateRecord(entityLogicalName, Utilities.removeBrackets(id), { statecode, statuscode }, successCallback, errorCallback);\r\n  };\r\n\r\n  updateRecord = async (entityLogicalName: string, id: string, data: {}, successCallback?: () => void, errorCallback?: () => void): Promise<any> =>\r\n    (successCallback && Xrm.WebApi.updateRecord(entityLogicalName, Utilities.removeBrackets(id), data).then(successCallback, errorCallback)) || Xrm.WebApi.updateRecord(entityLogicalName, id, data);\r\n\r\n  doRequest = (action: string, uri: string, data?: {}): Promise<any> => {\r\n    if (!RegExp(action, 'g').test('POST PATCH PUT GET DELETE')) {\r\n      // Expected action verbs.\r\n      throw new Error('Request: action parameter must be one of the following: ' + 'POST, PATCH, PUT, GET, or DELETE.');\r\n    }\r\n    if (typeof uri !== 'string') {\r\n      throw new Error('Request: uri parameter must be a string.');\r\n    }\r\n    if (RegExp(action, 'g').test('PATCH PUT') && (data === null || data === undefined)) {\r\n      throw new Error('Request: data parameter must not be null for operations that create or modify data.');\r\n    }\r\n\r\n    // Construct a fully qualified URI if a relative URI is passed in.\r\n    if (uri.charAt(0) === '/') {\r\n      uri = Xrm.Utility.getGlobalContext().getClientUrl() + '/api/data/v9.1' + uri;\r\n    }\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      var request = new XMLHttpRequest();\r\n      request.open(action, encodeURI(uri), true);\r\n      request.setRequestHeader('OData-MaxVersion', '4.0');\r\n      request.setRequestHeader('OData-Version', '4.0');\r\n      request.setRequestHeader('Accept', 'application/json');\r\n      request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\r\n      request.onreadystatechange = function () {\r\n        if (this.readyState === 4) {\r\n          request.onreadystatechange = null;\r\n          switch (this.status) {\r\n            case 200: // Success with content returned in response body.\r\n            case 204: // Success with no content returned in response body.\r\n              resolve(this);\r\n              break;\r\n            default:\r\n              // All other statuses are unexpected so are treated like errors.\r\n              var error;\r\n              try {\r\n                error = JSON.parse(request.response).error;\r\n              } catch (e: any) {\r\n                error = new Error(e);\r\n              }\r\n              reject(error);\r\n              break;\r\n          }\r\n        }\r\n      };\r\n      request.send(JSON.stringify(data));\r\n    });\r\n  };\r\n\r\n  getFileColumn(entityset: string, id: string, field: string): Promise<any> {\r\n    if (!entityset) throw new Error('entityset parameter must not be null ');\r\n    if (!id) throw new Error('id parameter must not be null ');\r\n    if (!field) throw new Error('field parameter must not be null ');\r\n\r\n    let action = 'GET';\r\n    let uri = `/${entityset}(${Utilities.removeBrackets(id)})/${field}/$value`;\r\n\r\n    return this.doRequest(action, uri);\r\n  }\r\n\r\n  callAction = async (entityName: string, id: string, actionName: string, data: any): Promise<any> => {\r\n    let uri = '/';\r\n    if (typeof actionName !== 'string' || actionName === '') throw new Error('actionName parameter is invalid.');\r\n\r\n    if (entityName) {\r\n      let entityMetadata = await Utilities.getEntityMetadata(entityName);\r\n      if (entityMetadata !== null && entityName !== entityMetadata.EntitySetName) entityName = entityMetadata.EntitySetName;\r\n\r\n      uri += entityName;\r\n      if (id) uri += `(${id})`;\r\n      uri += '/' + (actionName.startsWith('Microsoft.Dynamics.CRM.') ? actionName : 'Microsoft.Dynamics.CRM.' + actionName);\r\n    } else uri += actionName;\r\n\r\n    let callAction = await this.doRequest('POST', uri, data);\r\n    return callAction;\r\n  };\r\n}\r\n\r\nexport const _OData = OData.getInstance();\r\n","import { logger } from '../Logger/logger';\r\nimport { IProcess } from './process.interface';\r\n\r\nclass Process implements IProcess {\r\n  constructor() {}\r\n\r\n  getDisplayState(): any {\r\n    try {\r\n      return formContext.ui.process.getDisplayState();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getDisplayState');\r\n    }\r\n  }\r\n  getVisible(): any {\r\n    try {\r\n      return formContext.ui.process.getVisible();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getVisible');\r\n    }\r\n  }\r\n  reflow(updateUI: boolean, parentStage: string, nextStage: string): void {\r\n    try {\r\n      formContext.ui.process.reflow(updateUI, parentStage, nextStage);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.reflow');\r\n    }\r\n  }\r\n  setDisplayState(state: string): void {\r\n    try {\r\n      formContext.ui.process.setDisplayState(state);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.setDisplayState');\r\n    }\r\n  }\r\n\r\n  addOnPreProcessStatusChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['addOnPreProcessStatusChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.addOnPreProcessStatusChange');\r\n    }\r\n  }\r\n  removeOnPreProcessStatusChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['removeOnPreProcessStatusChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.removeOnPreProcessStatusChange');\r\n    }\r\n  }\r\n  addOnProcessStatusChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['addOnProcessStatusChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.addOnProcessStatusChange');\r\n    }\r\n  }\r\n  removeOnProcessStatusChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['removeOnProcessStatusChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.removeOnProcessStatusChange');\r\n    }\r\n  }\r\n  addOnStageChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['addOnStageChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.addOnStageChange');\r\n    }\r\n  }\r\n  removeOnStageChange(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['removeOnStageChange'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.removeOnStageChange');\r\n    }\r\n  }\r\n  addOnStageSelected(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['addOnStageSelected'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.addOnStageSelected');\r\n    }\r\n  }\r\n  removeOnStageSelected(fuc: any): void {\r\n    try {\r\n      formContext['data']['process']['removeOnStageSelected'](fuc);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.removeOnStageSelected');\r\n    }\r\n  }\r\n  getActiveProcess() {\r\n    try {\r\n      formContext['data']['process']['getActiveProcess']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getActiveProcess');\r\n    }\r\n  }\r\n  setActiveProcess(processId: string, callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['setActiveProcess'](processId, callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.setActiveProcess');\r\n    }\r\n  }\r\n  getProcessInstances(callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['getProcessInstances'](callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getProcessInstances');\r\n    }\r\n  }\r\n  setActiveProcessInstance(processInstanceId: string, callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['setActiveProcessInstance'](processInstanceId, callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.setActiveProcessInstance');\r\n    }\r\n  }\r\n  getInstanceId(): any {\r\n    try {\r\n      return formContext['data']['process']['getInstanceId']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getInstanceId');\r\n    }\r\n  }\r\n  getInstanceName(): any {\r\n    try {\r\n      return formContext['data']['process']['getInstanceName']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getInstanceName');\r\n    }\r\n  }\r\n  getStatus(): any {\r\n    try {\r\n      return formContext['data']['process']['getStatus']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getStatus');\r\n    }\r\n  }\r\n  setStatus(status: string, callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['setStatus'](status, callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.setStatus');\r\n    }\r\n  }\r\n  getActiveStage() {\r\n    try {\r\n      formContext['data']['process']['getActiveStage']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getActiveStage');\r\n    }\r\n  }\r\n  setActiveStage(stageId: string, callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['setActiveStage'](stageId, callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.setActiveStage');\r\n    }\r\n  }\r\n  moveNext(callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['moveNext'](callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.moveNext');\r\n    }\r\n  }\r\n  movePrevious(callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['movePrevious'](callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.movePrevious');\r\n    }\r\n  }\r\n  getActivePath(): any {\r\n    try {\r\n      formContext['data']['process']['getActivePath']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getActivePath');\r\n    }\r\n  }\r\n  getEnabledProcesses(callbackFunction: any): void {\r\n    try {\r\n      formContext['data']['process']['getEnabledProcesses'](callbackFunction);\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getEnabledProcesses');\r\n    }\r\n  }\r\n  getSelectedStage() {\r\n    try {\r\n      formContext['data']['process']['getSelectedStage']();\r\n    } catch (e: any) {\r\n      logger.Error(e.message, 'Process.getSelectedStage');\r\n    }\r\n  }\r\n}\r\n\r\nexport const _Process = new Process();\r\n","import { Constants, SOAP_CONSTS, SOAP_TYPE } from \"../../Constant/constants\";\nimport { Entity, EntityReference, Attribute, BusinessEntity } from './objectType'\n\nif (!(window as any).$)\n    (window as any).$ = (window as any).parent.$;\nvar _$: any = (window as any).$\n\nexport const $ = _$\n\nexport const getXmlValue = function (key: string, dataType: string, value: any) {\n    var xml: string = \"\";\n    var xmlValue: string = \"\";\n    var extraNamespace: string = \"\";\n    // Check the param type to determine how the value is formed\n    switch (dataType) {\n        case SOAP_TYPE.String:\n            xmlValue = htmlEncode(value) || \"\"; // Allows fetchXml strings etc\n            break;\n        case SOAP_TYPE.DateTime:\n            xmlValue = value.toISOString() || \"\";\n            break;\n        case SOAP_TYPE.EntityReference:\n            xmlValue = \"<a:Id>\" + (value.id || \"\") + \"</a:Id>\" +\n                \"<a:LogicalName>\" + (value.entityType || \"\") + \"</a:LogicalName>\" +\n                \"<a:Name i:nil='true' />\";\n            break;\n        case SOAP_TYPE.OptionSet:\n        case SOAP_TYPE.Money:\n            xmlValue = \"<a:Value>\" + (value || 0) + \"</a:Value>\";\n            break;\n        case SOAP_TYPE.Entity:\n            xmlValue = getXmlEntityData(value);\n            break;\n        case SOAP_TYPE.EntityCollection:\n            if (value != null && value.length > 0) {\n                var entityCollection = \"\";\n                for (var i = 0; i < value.length; i++) {\n                    var entityData = getXmlEntityData(value[i]);\n                    if (entityData !== null) {\n                        entityCollection += \"<a:Entity>\" + entityData + \"</a:Entity>\";\n                    }\n                }\n                if (entityCollection !== null && entityCollection !== \"\") {\n                    xmlValue = \"<a:Entities>\" + entityCollection + \"</a:Entities>\" +\n                        \"<a:EntityName i:nil='true' />\" +\n                        \"<a:MinActiveRowVersion i:nil='true' />\" +\n                        \"<a:MoreRecords>false</a:MoreRecords>\" +\n                        \"<a:PagingCookie i:nil='true' />\" +\n                        \"<a:TotalRecordCount>0</a:TotalRecordCount>\" +\n                        \"<a:TotalRecordCountLimitExceeded>false</a:TotalRecordCountLimitExceeded>\";\n                }\n            }\n            break;\n        case SOAP_TYPE.Guid:\n            // I don't think guid fields can even be null?\n            xmlValue = value || Constants.EmptyGuid;\n            // This is a hacky fix to get guids working since they have a conflicting namespace :(\n            extraNamespace = \" xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/'\";\n            break;\n        default: // bool, int, double, decimal\n            xmlValue = value != undefined ? value : null;\n            break;\n    }\n    xml = \"<a:KeyValuePairOfstringanyType>\" +\n        \"<b:key>\" + key + \"</b:key>\" +\n        \"<b:value i:type='\" + dataType + \"'\" + extraNamespace;\n    // nulls crash if you have a non-self-closing tag\n    if (xmlValue === null || xmlValue === \"\") {\n        xml += \" i:nil='true' />\";\n    }\n    else {\n        xml += \">\" + xmlValue + \"</b:value>\";\n    }\n    xml += \"</a:KeyValuePairOfstringanyType>\";\n    return xml;\n}\n\n// Get only the immediate child nodes for a specific tag, otherwise entitycollections etc mess it up\nexport const getChildNodes: any = function (node: any, childNodesName: any) {\n    var childNodes = [];\n    for (var i = 0; i < node.childNodes.length; i++) {\n        if (node.childNodes[i].tagName == childNodesName) {\n            childNodes.push(node.childNodes[i]);\n        }\n    }\n    // Chrome uses just 'Results' instead of 'a:Results' etc\n    if (childNodes.length == 0 && childNodesName.indexOf(\":\") !== -1) {\n        childNodes = getChildNodes(node, childNodesName.substring(childNodesName.indexOf(\":\") + 1));\n    }\n    return childNodes;\n}\n// Get a single child node for a specific tag\nexport const getChildNode = function (node: any, childNodeName: any) {\n    var nodes = getChildNodes(node, childNodeName);\n    if (nodes != null && nodes.length > 0) { return nodes[0]; }\n    else { return null; }\n}\n// Gets the first not null value from a collection of nodes\nexport const getNodeTextValueNotNull = function (nodes: any) {\n    var value = \"\";\n    for (var i = 0; i < nodes.length; i++) {\n        if (value === \"\") {\n            value = getNodeTextValue(nodes[i]);\n        }\n    }\n    return value;\n}\n// Gets the string value of the XML node\nexport const getNodeTextValue = function (node: any) {\n    if (node != null) {\n        var textNode = node.firstChild;\n        if (textNode != null) {\n            return textNode.textContent || textNode.nodeValue || textNode.data || textNode.text;\n        }\n    }\n    return \"\";\n}\n// Gets the value of a parameter based on its type, can be recursive for entities\nexport const getValue: any = function (node: any) {\n    var value = null;\n    var type = null;\n    if (node != null) {\n        type = node.getAttribute(\"i:type\") || node.getAttribute(\"type\");\n        // If the parameter/attribute is null, there won't be a type either\n        if (type != null) {\n            // Get the part after the ':' (since Chrome doesn't have the ':')\n            var valueType = type.substring(type.indexOf(\":\") + 1).toLowerCase();\n            if (valueType == \"entityreference\") {\n                // Gets the lookup object\n                var attrValueIdNode = getChildNode(node, \"a:Id\");\n                var attrValueEntityNode = getChildNode(node, \"a:LogicalName\");\n                var attrValueNameNode = getChildNode(node, \"a:Name\");\n                var lookupId = getNodeTextValue(attrValueIdNode);\n                var lookupName = getNodeTextValue(attrValueNameNode);\n                var lookupEntity = getNodeTextValue(attrValueEntityNode);\n                value = new EntityReference(lookupEntity, lookupId, lookupName);\n            }\n            else if (valueType == \"entity\") {\n                // Gets the entity data, and all attributes\n                value = getEntityData(node);\n            }\n            else if (valueType == \"entitycollection\") {\n                // Loop through each entity, returns each entity, and all attributes\n                var entitiesNode = getChildNode(node, \"a:Entities\");\n                var entityNodes = getChildNodes(entitiesNode, \"a:Entity\");\n                value = [];\n                if (entityNodes != null && entityNodes.length > 0) {\n                    for (var i = 0; i < entityNodes.length; i++) {\n                        value.push(getEntityData(entityNodes[i]));\n                    }\n                }\n            }\n            else if (valueType == \"aliasedvalue\") {\n                // Gets the actual data type of the aliased value\n                // Key for these is \"alias.fieldname\"\n                var aliasedValue = getValue(getChildNode(node, \"a:Value\"));\n                if (aliasedValue != null) {\n                    value = aliasedValue.value;\n                    type = aliasedValue.type;\n                }\n            }\n            else {\n                // Standard fields like string, int, date, money, optionset, float, bool, decimal\n                // Output will be string, even for number fields etc\n                var stringValue = getNodeTextValue(node);\n                if (stringValue != null) {\n                    switch (valueType) {\n                        case \"datetime\":\n                            value = new Date(stringValue);\n                            break;\n                        case \"int\":\n                        case \"money\":\n                        case \"optionsetvalue\":\n                        case \"double\": // float\n                        case \"decimal\":\n                            value = Number(stringValue);\n                            break;\n                        case \"boolean\":\n                            value = stringValue.toLowerCase() === \"true\";\n                            break;\n                        default:\n                            value = stringValue;\n                    }\n                }\n            }\n        }\n    }\n    return new Attribute(value, type);\n}\n///\n/// Encoding for the xml values\n///\nexport const xmlEncode = function (strInput: string) {\n    var c,\n        encoded = '';\n    if (strInput === null) {\n        return null;\n    }\n    if (strInput === '') {\n        return '';\n    }\n    for (var cnt = 0, max = strInput.length; cnt < max; cnt++) {\n        c = strInput.charCodeAt(cnt);\n        if (((c > 96) && (c < 123))\n            || ((c > 64) && (c < 91))\n            || (c === 32)\n            || ((c > 47) && (c < 58))\n            || (c === 46)\n            || (c === 44)\n            || (c === 45)\n            || (c === 95)) {\n            encoded = encoded + String.fromCharCode(c);\n        }\n        else {\n            encoded = encoded + '&#' + c + ';';\n        }\n    }\n    return encoded;\n}\n\n///\n/// Converts the response to a result-object that contains the entities, pagaingcookie...\n///\nexport const getFetchResult = function (data: any) {\n    // \"s:Envelope/s:Body/ExecuteResponse/ExecuteResult\"\n    var executeResult = data.firstChild.firstChild.firstChild.firstChild,\n        resultsNode = getChildNode(executeResult, 'a:Results'),\n        entityCollection = getChildNode(resultsNode.firstChild, 'b:value'),\n        resultSet = getChildNode(entityCollection, 'a:Entities').childNodes;\n    return {\n        entityName: getChildNodeText(entityCollection, 'a:EntityName'),\n        moreRecords: (getChildNodeText(entityCollection, 'a:MoreRecords') === 'true'),\n        pagingCookie: getChildNodeText(entityCollection, 'a:PagingCookie'),\n        totalRecordCount: parseInt(getChildNodeText(entityCollection, 'a:TotalRecordCount'), 10),\n        entities: $.map(resultSet, parseSingleEntityNode)\n    };\n}\n\n\n///\n/// Injects the paging-cookie & page-count\n///\nexport const injectPagingDetails = function (fetchxml: any, page: any, pagingCookie: any) {\n    // inject the paging attributes\n    var xmldoc = $.parseXML(fetchxml),\n        fetch = $(xmldoc).find('fetch');\n    fetch.attr('page', page);\n    fetch.attr('paging-cookie', pagingCookie);\n    return xmlToString(xmldoc);\n}\n\n\n///\n/// Performs the Ajax request\n///\nexport const executeRequest = function (serverUrl: string, xml: any, opt_asyn: boolean) {\n    // default is true\n    let header: any = {};\n    header[SOAP_CONSTS.SOAP_ACTION.text] = SOAP_CONSTS.SOAP_ACTION.value;\n    header[SOAP_CONSTS.ACCEPT_TYPE.text] = SOAP_CONSTS.ACCEPT_TYPE.value.JSON;\n    header[SOAP_CONSTS.CONTENT_TYPE.text] = SOAP_CONSTS.CONTENT_TYPE.value.XML;\n    return $.ajax({\n        type: SOAP_CONSTS.HTTP_METHOD.POST,\n        async: opt_asyn != false,\n        data: xml,\n        url: serverUrl + SOAP_CONSTS.SOAP_ENDPOINT,\n        headers: header\n    });\n}\n\nexport const selectSingleNode = function (node: any, xpathExpr: any) {\n    if (typeof (node.selectSingleNode) != \"undefined\") {\n        return node.selectSingleNode(xpathExpr);\n    } else {\n        var xpe = new XPathEvaluator();\n        var results = xpe.evaluate(xpathExpr, node, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return results.singleNodeValue;\n\n    }\n};\n\nexport const setSelectionNamespaces = function (doc: any) {\n    var namespaces = [\n        \"xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'\",\n        \"xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'\",\n        \"xmlns:i='http://www.w3.org/2001/XMLSchema-instance'\",\n        \"xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'\",\n        \"xmlns:c='http://schemas.microsoft.com/xrm/2011/Metadata'\",\n        \"xmlns:ser='http://schemas.microsoft.com/xrm/2011/Contracts/Services'\"\n    ];\n    doc.setProperty(\"SelectionNamespaces\", namespaces.join(\" \"));\n};\n\n\nexport const getError = function (async: boolean, resp: any) {\n    //Error descriptions come from http://support.microsoft.com/kb/193625\n\n    if (resp.status === 12029) {\n        throw new Error(\"The attempt to connect to the server failed.\");\n    }\n    if (resp.status === 12007) {\n        throw new Error(\"The server name could not be resolved.\");\n    }\n    var faultXml = resp.responseXML;\n\n    var errorMessage = \"Unknown (unable to parse the fault)\";\n    if (faultXml !== null && typeof faultXml == \"object\") {\n\n        var faultstring = null;\n        var errorCode = null;\n\n        var bodyNode = faultXml.firstChild.firstChild;\n\n        //Retrieve the fault node\n        for (var i = 0; i < bodyNode.childNodes.length; i++) {\n            var node = bodyNode.childNodes[i];\n\n            //NOTE: This comparison does not handle the case where the XML namespace changes\n            if (\"s:Fault\" === node.nodeName) {\n                for (var j = 0; j < node.childNodes.length; j++) {\n                    var testNode = node.childNodes[j];\n                    if (\"faultstring\" === testNode.nodeName) {\n                        faultstring = getNodeText(testNode);\n                    }\n                    if (\"detail\" === testNode.nodeName) {\n                        for (var k = 0; k < testNode.childNodes.length; k++) {\n                            var orgServiceFault = testNode.childNodes[k];\n                            if (\"OrganizationServiceFault\" === orgServiceFault.nodeName) {\n                                for (var l = 0; l < orgServiceFault.childNodes.length; l++) {\n                                    var errorCodeNode = orgServiceFault.childNodes[l];\n                                    if (\"ErrorCode\" === errorCodeNode.nodeName) {\n                                        errorCode = getNodeText(errorCodeNode);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n                }\n                break;\n            }\n\n        }\n    }\n    if (errorCode != null && faultstring != null) {\n        errorMessage = \"Error Code:\" + errorCode + \" Message: \" + faultstring;\n    } else {\n        if (faultstring != null) {\n            errorMessage = faultstring;\n        }\n    }\n    if (async) {\n        return new Error(errorMessage);\n    } else {\n        throw new Error(errorMessage);\n    }\n\n};\n\nexport const isArray = function (input: any) {\n    return input.constructor.toString().indexOf(\"Array\") !== -1;\n};\n\nexport const stringToDate = function (s: any) {\n    var b = s.split(/\\D/);\n    return new Date(Date.UTC(b[0], --b[1], b[2], b[3], b[4], b[5]));\n};\n\n\n///\n/// IE 9/10 and Chrome, Firefox, ... using \"textContent\" and IE 8 using \"text\n///\nexport const getNodeText = function (node: any) {\n    return node.text !== undefined\n        ? node.text\n        : node.textContent;\n}\n\nexport const encodeValue = function (value: any) {\n    // Handle GUIDs wrapped in braces\n    if (typeof value == \"string\") {\n        value = value.replace(/[{}]/g, \"\");\n    }\n\n    // ReSharper disable QualifiedExpressionMaybeNull\n    return (typeof value === \"object\" && value.getTime)\n        // ReSharper restore QualifiedExpressionMaybeNull\n        ?\n        encodeDate(value) :\n        crmXmlEncode(value);\n};\n\nexport const crmXmlEncode = function (s: any) {\n    // ReSharper disable UsageOfPossiblyUnassignedValue\n    // ReSharper disable ExpressionIsAlwaysConst\n    if ('undefined' === typeof s || null === s) return s;\n    // ReSharper restore ExpressionIsAlwaysConst\n    // ReSharper restore UsageOfPossiblyUnassignedValue\n    else if (typeof s != \"string\") s = s.toString();\n    return innerSurrogateAmpersandWorkaround(s);\n};\n\nexport const selectSingleNodeText = function (node: any, xpathExpr: any) {\n    var x = selectSingleNode(node, xpathExpr);\n    if (isNodeNull(x)) {\n        return null;\n    }\n    if (typeof (x.text) != \"undefined\") {\n        return x.text;\n    } else {\n        return x.textContent;\n    }\n};\n\nexport const crmXmlDecode = function (s: any) {\n    if (typeof s != \"string\") s = s.toString();\n    return s;\n};\n\n\nconst getEntityData = function (entityNode: any) {\n    var value: any = null;\n    var entityAttrsNode = getChildNode(entityNode, \"a:Attributes\");\n    var entityIdNode = getChildNode(entityNode, \"a:Id\");\n    var entityLogicalNameNode = getChildNode(entityNode, \"a:LogicalName\");\n    var entityFormattedValuesNode = getChildNode(entityNode, \"a:FormattedValues\");\n    var entityLogicalName = getNodeTextValue(entityLogicalNameNode);\n    var entityId = getNodeTextValue(entityIdNode);\n    var entityAttrs = getChildNodes(entityAttrsNode, \"a:KeyValuePairOfstringanyType\");\n    value = new Entity(entityLogicalName, entityId, null);\n    // Attribute values accessed via entity.attributes[\"new_fieldname\"]\n    if (entityAttrs != null && entityAttrs.length > 0) {\n        for (var i = 0; i < entityAttrs.length; i++) {\n            var attrNameNode = getChildNode(entityAttrs[i], \"b:key\")\n            var attrValueNode = getChildNode(entityAttrs[i], \"b:value\");\n            var attributeName = getNodeTextValue(attrNameNode);\n            var attributeValue = getValue(attrValueNode);\n            value.attributes[attributeName] = attributeValue;\n        }\n    }\n    // Formatted values accessed via entity.formattedValues[\"new_fieldname\"]\n    for (var j = 0; j < entityFormattedValuesNode.childNodes.length; j++) {\n        var foNode = entityFormattedValuesNode.childNodes[j];\n        var fNameNode = getChildNode(foNode, \"b:key\")\n        var fValueNode = getChildNode(foNode, \"b:value\");\n        var fName = getNodeTextValue(fNameNode);\n        var fValue = getNodeTextValue(fValueNode);\n        value.formattedValues[fName] = fValue;\n    }\n    return value;\n}\n\nconst getXmlEntityData = function (entity: any): string {\n    var xml: string = \"\";\n    if (entity != null) {\n        var attrXml = \"\";\n        for (let field in entity.attributes) {\n            var a = entity.attributes[field];\n            var aXml = getXmlValue(field, a.type, a.value);\n            attrXml += aXml;\n        }\n        if (attrXml !== \"\") {\n            xml = \"<a:Attributes>\" + attrXml + \"</a:Attributes>\";\n        }\n        else {\n            xml = \"<a:Attributes />\";\n        }\n        xml += \"<a:EntityState i:nil='true' />\" +\n            \"<a:FormattedValues />\" +\n            \"<a:Id>\" + entity.id + \"</a:Id>\" +\n            \"<a:KeyAttributes />\" +\n            \"<a:LogicalName>\" + entity.logicalName + \"</a:LogicalName>\" +\n            \"<a:RelatedEntities />\" +\n            \"<a:RowVersion i:nil='true' />\";\n    }\n    return xml;\n}\nconst htmlEncode = function (s: any) {\n    if (typeof s !== \"string\") { return s; }\n    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\n///\n/// Parses a date-string in ISO-format into a date-object\n///\nconst parseISO8601Date = (s: any) => {\n    // parenthese matches:\n    // year month day    hours minutes seconds  \n    // dotmilliseconds \n    // tzstring plusminus hours minutes\n    var re = /(\\d{4})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d):(\\d\\d))/;\n    var d = [];\n    d = s.match(re);\n    if (!d) {\n        throw \"Couldn't parse ISO 8601 date string '\" + s + \"'\";\n    }\n    // parse strings, leading zeros into proper ints\n    var a = [1, 2, 3, 4, 5, 6, 10, 11];\n    for (var i = 0, max = a.length; i < max; i++) {\n        d[a[i]] = parseInt(d[a[i]], 10);\n    }\n    d[7] = parseFloat(d[7]);\n    // Date.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n    // note that month is 0-11, not 1-12\n    // see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\n    var ms = Date.UTC(d[1], d[2] - 1, d[3], d[4], d[5], d[6]);\n    // if there are milliseconds, add them\n    if (d[7] > 0) {\n        ms += Math.round(d[7] * 1000);\n    }\n    // if there's a timezone, calculate it\n    if (d[8] !== 'Z' && d[10]) {\n        var offset = d[10] * 60 * 60 * 1000;\n        if (d[11]) {\n            offset += d[11] * 60 * 1000;\n        }\n        if (d[9] === '-') {\n            ms -= offset;\n        }\n        else {\n            ms += offset;\n        }\n    }\n    return new Date(ms);\n}\n\n///\n/// Converst the xml definiton into an attribute object. \n/// The joined attributes are evaluated via a recursive call of this function\n///\nconst convertXmlToAttributeObject = function (type: string, xmlnode: any) {\n    var attr: any = { 'type': type };\n    switch (type) {\n        case \"a:OptionSetValue\":\n            attr.value = getNodeText(xmlnode);\n            break;\n        case \"a:EntityReference\":\n            attr.guid = getChildNodeText(xmlnode, 'a:Id');\n            attr.name = getChildNodeText(xmlnode, 'a:Name');\n            attr.logicalName = getChildNodeText(xmlnode, 'a:LogicalName');\n            break;\n        case \"a:Money\":\n            attr.value = parseFloat(getNodeText(xmlnode));\n            break;\n        case \"a:AliasedValue\":\n            var aliasValue = getChildNode(xmlnode, 'a:Value'),\n                aliasType = getAttribute(aliasValue, 'i:type');\n            // recursive call\n            attr = convertXmlToAttributeObject(aliasType, aliasValue);\n            break;\n        case 'c:int':\n            attr.value = parseInt(getNodeText(xmlnode), 10);\n            break;\n        case 'c:decimal':\n            attr.value = parseFloat(getNodeText(xmlnode));\n            break;\n        case 'c:dateTime':\n            attr.value = parseISO8601Date(getNodeText(xmlnode));\n            break;\n        case 'c:boolean':\n            attr.value = (getNodeText(xmlnode) !== 'true') ? false : true;\n            break;\n        default:\n            attr.value = getNodeText(xmlnode);\n            break;\n    }\n    return attr;\n}\n\n///\n/// Parses \"Attribute\" nodes of the SOAP-response\n///\nconst parseAttibutes = function (attributesNode: any) {\n    var typedAttrSet: any = {},\n        attrNode = null,\n        key = null,\n        type = null,\n        value = null;\n    for (var i = 0, max = attributesNode.childNodes.length; i < max; i++) {\n        attrNode = attributesNode.childNodes[i];\n        // Establish the key for the attribute \n        key = getChildNodeText(attrNode, 'b:key');\n        value = getChildNode(attrNode, 'b:value');\n        type = getAttribute(value, 'i:type');\n        // populate the object\n        typedAttrSet[key] = convertXmlToAttributeObject(type, value);\n    }\n    return typedAttrSet;\n}\n///\n/// Parses a single xml-node -> transforms into BusinessEntity\n///\nconst parseSingleEntityNode = function (entityNode: any) {\n    var entity = new BusinessEntity();\n    entity.id = getChildNodeText(entityNode, 'a:Id');\n    entity.attributes = parseAttibutes(getChildNode(entityNode, 'a:Attributes'));\n    entity.logicalName = getChildNodeText(entityNode, 'a:LogicalName');\n    // parse the formated values\n    var childSet = getChildNode(entityNode, 'a:FormattedValues').childNodes;\n    for (var i = 0, max = childSet.length; i < max; i++) {\n        var item = childSet[i],\n            key = getChildNodeText(item, 'b:key'),\n            value = getChildNodeText(item, 'b:value');\n        entity.attributes[key].formattedValue = value;\n    }\n    return entity;\n}\n\n///\n/// Converts a given XMLDocument of XmlELement into a string\n///\nconst xmlToString = function (elem: any) {\n    var serialized;\n    if (window.XMLSerializer) {\n        // XMLSerializer exists in current Mozilla browsers\n        var serializer = new XMLSerializer();\n        serialized = serializer.serializeToString(elem);\n    }\n    else {\n        // Internet Explorer has a different approach to serializing XML\n        serialized = elem.xml;\n    }\n    return serialized;\n}\n///\n/// retrievs the text-value of the expression\n///\nconst getChildNodeText = function (xml: any, xpathExpression: any) {\n    return getNodeText(getChildNode(xml, xpathExpression));\n}\n\n///\n/// Get the attribute regardless of the namespace\n///\nconst getAttribute = function (xmlNode: any, attrName: string) {\n    for (var i = 0; i < xmlNode.attributes.length; i++) {\n        var attr = xmlNode.attributes[i];\n        if (attr.name == attrName) {\n            return attr.value;\n        }\n    }\n};\n\n\nconst encodeDate = function (dateTime: any) {\n    return dateTime.getFullYear() + \"-\" +\n        padNumber(dateTime.getMonth() + 1) + \"-\" +\n        padNumber(dateTime.getDate()) + \"T\" +\n        padNumber(dateTime.getHours()) + \":\" +\n        padNumber(dateTime.getMinutes()) + \":\" +\n        padNumber(dateTime.getSeconds());\n};\nconst padNumber = function (s: any) {\n    let len = 2;\n\n    s = '' + s;\n    while (s.length < len) {\n        s = \"0\" + s;\n    }\n    return s;\n};\n\n\nconst innerSurrogateAmpersandWorkaround = function (s: any) {\n    var buffer = '';\n    var c0;\n    var cnt;\n    var cntlength;\n    for (cnt = 0, cntlength = s.length; cnt < cntlength; cnt++) {\n        c0 = s.charCodeAt(cnt);\n        if (c0 >= 55296 && c0 <= 57343)\n            if (cnt + 1 < s.length) {\n                var c1 = s.charCodeAt(cnt + 1);\n                if (c1 >= 56320 && c1 <= 57343) {\n                    buffer += \"CRMEntityReferenceOpen\" + ((c0 - 55296) * 1024 + (c1 & 1023) + 65536).toString(16) + \"CRMEntityReferenceClose\";\n                    cnt++;\n                } else\n                    buffer += String.fromCharCode(c0);\n            } else buffer += String.fromCharCode(c0);\n        else buffer += String.fromCharCode(c0);\n    }\n    s = buffer;\n    buffer = \"\";\n    for (cnt = 0, cntlength = s.length; cnt < cntlength; cnt++) {\n        c0 = s.charCodeAt(cnt);\n        if (c0 >= 55296 && c0 <= 57343)\n            buffer += String.fromCharCode(65533);\n        else buffer += String.fromCharCode(c0);\n    }\n    s = buffer;\n    s = htmlEncode(s);\n    s = s.replace(/CRMEntityReferenceOpen/g, \"&#x\");\n    s = s.replace(/CRMEntityReferenceClose/g, \";\");\n    return s;\n};\n\nconst nsResolver = function (prefix: any) {\n    var ns: any = {\n        \"s\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n        \"a\": \"http://schemas.microsoft.com/xrm/2011/Contracts\",\n        \"i\": \"http://www.w3.org/2001/XMLSchema-instance\",\n        \"b\": \"http://schemas.datacontract.org/2004/07/System.Collections.Generic\",\n        \"c\": \"http://schemas.microsoft.com/xrm/2011/Metadata\",\n        \"ser\": \"http://schemas.microsoft.com/xrm/2011/Contracts/Services\"\n    };\n    return ns[prefix] || null;\n};\n\nconst isNodeNull = function (node: any) {\n    if (node == null) {\n        return true;\n    }\n    if ((node.attributes.getNamedItem(\"i:nil\") != null) && (node.attributes.getNamedItem(\"i:nil\").value === \"true\")) {\n        return true;\n    }\n    return false;\n};\n\n\n\n\n","import { SOAP_CONSTS } from \"../../Constant/constants\";\nimport { GlobalContext } from \"../Context/GlobalContext/globalcontext\";\nimport { logger } from \"../Logger/logger\";\nimport { encodeValue, executeRequest, selectSingleNode, setSelectionNamespaces, getError, selectSingleNodeText, crmXmlDecode, isArray, getNodeText } from \"./common\";\nimport { IEntityBase } from \"./entityBase.interface\";\nimport { BusinessEntity } from \"./objectType\";\n\nexport class EntityBase extends GlobalContext implements IEntityBase {\n    constructor() {\n        super()\n    }\n\n    public setState(entityName: string, recordId: string, stateCode: number, statusCode: number, async: boolean, internalCallback: any) {\n        try {\n            var request = [\n                '<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">',\n                '<request i:type=\"b:SetStateRequest\"',\n                ' xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" ',\n                ' xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\" ',\n                ' xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\" ',\n                ' xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">',\n                '<a:Parameters>',\n                '<a:KeyValuePairOfstringanyType>',\n                '<c:key>EntityMoniker</c:key>',\n                '<c:value i:type=\"a:EntityReference\">',\n                '<a:Id>', recordId, '</a:Id>',\n                '<a:LogicalName>', entityName, '</a:LogicalName>',\n                '<a:Name i:nil=\"true\" />',\n                '</c:value>',\n                '</a:KeyValuePairOfstringanyType>',\n                '<a:KeyValuePairOfstringanyType>',\n                '<c:key>State</c:key>',\n                '<c:value i:type=\"a:OptionSetValue\">',\n                '<a:Value>', stateCode, '</a:Value>',\n                '</c:value>',\n                '</a:KeyValuePairOfstringanyType>',\n                '<a:KeyValuePairOfstringanyType>',\n                '<c:key>Status</c:key>',\n                '<c:value i:type=\"a:OptionSetValue\">',\n                '<a:Value>', statusCode, '</a:Value>',\n                '</c:value>',\n                '</a:KeyValuePairOfstringanyType>',\n                '</a:Parameters>',\n                '<a:RequestId i:nil=\"true\"/>',\n                '<a:RequestName>SetState</a:RequestName>',\n                '</request>',\n                '</Execute>'].join(\"\");\n            return this.doSoapRequest(request, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n                var result = crmXmlDecode(responseText);\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.setState\")\n        }\n    }\n\n    public assign(id: string, entityname: string, assigneeid: string, opt_asyn: boolean) {\n        try {\n            // default is true\n            var request = ['<s:Envelope xmlns:s=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">',\n                '  <s:Body>',\n                '    <Execute xmlns=\\\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\\\" ',\n                '           xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">',\n                '      <request i:type=\\\"b:AssignRequest\\\" xmlns:a=\\\"http://schemas.microsoft.com/xrm/2011/Contracts\\\" ',\n                '           xmlns:b=\\\"http://schemas.microsoft.com/crm/2011/Contracts\\\">',\n                '        <a:Parameters xmlns:c=\\\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\\\">',\n                '          <a:KeyValuePairOfstringanyType>',\n                '            <c:key>Target</c:key>',\n                '            <c:value i:type=\\\"a:EntityReference\\\">',\n                '              <a:Id>' + id + '</a:Id>',\n                '              <a:LogicalName>' + entityname + '</a:LogicalName>',\n                '              <a:Name i:nil=\\\"true\\\" />',\n                '            </c:value>',\n                '          </a:KeyValuePairOfstringanyType>',\n                '          <a:KeyValuePairOfstringanyType>',\n                '            <c:key>Assignee</c:key>',\n                '            <c:value i:type=\\\"a:EntityReference\\\">',\n                '              <a:Id>' + assigneeid + '</a:Id>',\n                '              <a:LogicalName>systemuser</a:LogicalName>',\n                '              <a:Name i:nil=\\\"true\\\" />',\n                '            </c:value>',\n                '          </a:KeyValuePairOfstringanyType>',\n                '        </a:Parameters>',\n                '        <a:RequestId i:nil=\\\"true\\\" />',\n                '        <a:RequestName>Assign</a:RequestName>',\n                '      </request>',\n                '    </Execute>',\n                '  </s:Body>',\n                '</s:Envelope>'].join('');\n            return executeRequest(this.getClientUrl(), request, opt_asyn != false);\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.assign\")\n        }\n    }\n\n    public doSoapRequest = (soapBody: any, requestType: string, async: boolean, internalCallback: any) => {\n        async = async || false;\n\n        // Wrap the Soap Body in a soap:Envelope.\n        var soapXml = [\"<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'>\",\n            \"<soap:Body>\",\n            \"<\", requestType, \" xmlns='http://schemas.microsoft.com/xrm/2011/Contracts/Services' xmlns:i='http://www.w3.org/2001/XMLSchema-instance'>\", soapBody, \"</\", requestType, \">\",\n            \"</soap:Body>\",\n            \"</soap:Envelope>\"\n        ].join(\"\");\n\n        var req: any = new XMLHttpRequest();\n        req.open(SOAP_CONSTS.HTTP_METHOD.POST, this.getClientUrl() + SOAP_CONSTS.SOAP_ENDPOINT, async != false);\n        req.setRequestHeader(SOAP_CONSTS.ACCEPT_TYPE.text, SOAP_CONSTS.ACCEPT_TYPE.value.XML);\n        req.setRequestHeader(SOAP_CONSTS.CONTENT_TYPE.text, SOAP_CONSTS.CONTENT_TYPE.value.XML);\n        req.setRequestHeader(SOAP_CONSTS.SOAP_ACTION.text, SOAP_CONSTS.SOAP_ACTION.value);\n\n        //IE10\n        try {\n            req.responseType = 'msxml-document';\n        } catch (e) { }\n\n        if (async) {\n            req.onreadystatechange = function () {\n                if (req.readyState === 4 /* complete */) {\n                    req.onreadystatechange = null; //Addresses potential memory leak issue with IE\n                    if (req.status === 200) { // \"OK\"\n                        var doc = req.responseXML;\n                        try {\n                            setSelectionNamespaces(doc);\n                        } catch (e) { }\n                        internalCallback(doc);\n                    } else {\n                        getError(true, req);\n                    }\n                }\n            };\n\n            req.send(soapXml);\n        } else {\n            req.send(soapXml);\n            if (req.status === 200) {\n                var doc = req.responseXML;\n                try {\n                    setSelectionNamespaces(doc);\n                } catch (e) { }\n                var result = doc;\n                return !!internalCallback ? internalCallback(result) : result;\n            } else {\n                getError(false, req);\n            }\n        }\n        // ReSharper disable NotAllPathsReturnValue\n    };\n\n    public retrieve = (entityName: string, id: string, columnSet: any, async: boolean, internalCallback: any) => {\n        try {\n            var attributes = \"\";\n            // ReSharper disable AssignedValueIsNeverUsed\n            var query = \"\";\n            // ReSharper restore AssignedValueIsNeverUsed\n            if (columnSet != null) {\n                for (var i = 0, ilength = columnSet.length; i < ilength; i++) {\n                    attributes += \"<c:string>\" + columnSet[i] + \"</c:string>\";\n                }\n                query = \"<a:AllColumns>false</a:AllColumns>\" +\n                    \"<a:Columns xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/Arrays'>\" +\n                    attributes +\n                    \"</a:Columns>\";\n            } else {\n                query = \"<a:AllColumns>true</a:AllColumns><a:Columns xmlns:b='http://schemas.microsoft.com/2003/10/Serialization/Arrays' />\";\n            }\n\n            var msgBody = [\n                \"<request i:type='a:RetrieveRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Target</b:key>\",\n                \"<b:value i:type='a:EntityReference'>\",\n                \"<a:Id>\", encodeValue(id), \"</a:Id>\",\n                \"<a:LogicalName>\", entityName, \"</a:LogicalName>\",\n                \"<a:Name i:nil='true' />\",\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>ColumnSet</b:key>\",\n                \"<b:value i:type='a:ColumnSet'>\",\n                query,\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true' />\",\n                \"<a:RequestName>Retrieve</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            return this.doSoapRequest(msgBody, \"Execute\", !!internalCallback, function (resultXml: any) {\n                var retrieveResult = selectSingleNode(resultXml, \"//b:value\");\n                var entity: BusinessEntity = new BusinessEntity();\n                entity.deserialize(retrieveResult);\n\n                if (!async)\n                    return entity;\n                else\n                    return internalCallback(entity);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.retrieve\")\n        }\n    };\n\n    public create = (be: any, internalCallback: any) => {\n        try {\n            var request = be.serialize();\n\n            var async = !!internalCallback;\n\n            var mBody = [\"<request i:type='a:CreateRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Target</b:key>\",\n                request,\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true' />\",\n                \"<a:RequestName>Create</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            return this.doSoapRequest(mBody, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//b:value\");\n\n                var result = crmXmlDecode(responseText);\n\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.create\")\n        }\n    };\n\n    public update = (be: any, internalCallback: any) => {\n        try {\n            var request = be.serialize();\n\n            var async = !!internalCallback;\n\n            var mBody = [\"<request i:type='a:UpdateRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Target</b:key>\",\n                request,\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true' />\",\n                \"<a:RequestName>Update</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            return this.doSoapRequest(mBody, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//a:Results\");\n                var result = crmXmlDecode(responseText);\n\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.update\")\n        }\n    };\n\n    public delete = (entityName: string, id: string, internalCallback: any) => {\n\n        try {\n            var request = [\n                \"<request i:type='a:DeleteRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'><a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'><a:KeyValuePairOfstringanyType><b:key>Target</b:key><b:value i:type='a:EntityReference'><a:Id>\",\n                id, \"</a:Id><a:LogicalName>\",\n                entityName, \"</a:LogicalName><a:Name i:nil='true' /></b:value></a:KeyValuePairOfstringanyType></a:Parameters><a:RequestId i:nil='true' /><a:RequestName>Delete</a:RequestName></request>\"\n            ].join(\"\");\n\n            var async = !!internalCallback;\n\n            return this.doSoapRequest(request, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//a:Results\");\n                var result = crmXmlDecode(responseText);\n\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.delete\")\n        }\n    };\n\n    public retrieveMultiple = (query: string, internalCallback: any) => {\n        try {\n            var request = [\n                \"<request i:type='a:RetrieveMultipleRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Query</b:key>\",\n                \"<b:value i:type='a:QueryExpression'>\",\n                query,\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true'/>\",\n                \"<a:RequestName>RetrieveMultiple</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            var async = !!internalCallback;\n\n            return this.doSoapRequest(request, \"Execute\", async, function (resultXml: any) {\n                var resultNodes = selectSingleNode(resultXml, \"//a:Entities\");\n\n                var retriveMultipleResults = [];\n\n                for (var i = 0, ilength = resultNodes.childNodes.length; i < ilength; i++) {\n                    var entity = new BusinessEntity();\n\n                    entity.deserialize(resultNodes.childNodes[i]);\n                    retriveMultipleResults[i] = entity;\n                }\n\n                if (!async)\n                    return retriveMultipleResults;\n                else\n                    return internalCallback(retriveMultipleResults);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.retrieveMultiple\")\n        }\n    };\n\n    public associate = (relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: string, internalCallback: any) => {\n\n        try {\n            var relatedEntities: any = relatedBusinessEntities;\n\n            relatedEntities = isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\n            var output = [];\n            for (var i = 0, ilength = relatedEntities.length; i < ilength; i++) {\n                if (relatedEntities[i].id !== \"\") {\n                    output.push(\"<a:EntityReference>\",\n                        \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\",\n                        \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\",\n                        \"<a:Name i:nil='true' />\",\n                        \"</a:EntityReference>\");\n                }\n            }\n\n            var relatedXml = output.join(\"\");\n\n            var request = [\n                \"<request i:type='a:AssociateRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Target</b:key>\",\n                \"<b:value i:type='a:EntityReference'>\",\n                \"<a:Id>\", encodeValue(targetId), \"</a:Id>\",\n                \"<a:LogicalName>\", targetEntityName, \"</a:LogicalName>\",\n                \"<a:Name i:nil='true' />\",\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Relationship</b:key>\",\n                \"<b:value i:type='a:Relationship'>\",\n                \"<a:PrimaryEntityRole>Referenced</a:PrimaryEntityRole>\",\n                \"<a:SchemaName>\", relationshipName, \"</a:SchemaName>\",\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>RelatedEntities</b:key>\",\n                \"<b:value i:type='a:EntityReferenceCollection'>\",\n                relatedXml,\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true' />\",\n                \"<a:RequestName>Associate</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            var async = !!internalCallback;\n\n            return this.doSoapRequest(request, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n                var result = crmXmlDecode(responseText);\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.associate\")\n        }\n    };\n\n    public disassociate = (relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: string, internalCallback: any) => {\n        try {\n            var relatedEntities: any = relatedBusinessEntities;\n\n            relatedEntities = isArray(relatedEntities) ? relatedEntities : [relatedEntities];\n\n            var output = [];\n            for (var i = 0, ilength = relatedEntities.length; i < ilength; i++) {\n                if (relatedEntities[i].id !== \"\") {\n                    output.push(\"<a:EntityReference>\",\n                        \"<a:Id>\", relatedEntities[i].id, \"</a:Id>\",\n                        \"<a:LogicalName>\", relatedEntityName, \"</a:LogicalName>\",\n                        \"<a:Name i:nil='true' />\",\n                        \"</a:EntityReference>\");\n                }\n            }\n\n            var relatedXml = output.join(\"\");\n\n            var request = [\n                \"<request i:type='a:DisassociateRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>\",\n                \"<a:Parameters xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Target</b:key>\",\n                \"<b:value i:type='a:EntityReference'>\",\n                \"<a:Id>\", encodeValue(targetId), \"</a:Id>\",\n                \"<a:LogicalName>\", targetEntityName, \"</a:LogicalName>\",\n                \"<a:Name i:nil='true' />\",\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>Relationship</b:key>\",\n                \"<b:value i:type='a:Relationship'>\",\n                \"<a:PrimaryEntityRole i:nil='true' />\",\n                \"<a:SchemaName>\", relationshipName, \"</a:SchemaName>\",\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"<a:KeyValuePairOfstringanyType>\",\n                \"<b:key>RelatedEntities</b:key>\",\n                \"<b:value i:type='a:EntityReferenceCollection'>\",\n                relatedXml,\n                \"</b:value>\",\n                \"</a:KeyValuePairOfstringanyType>\",\n                \"</a:Parameters>\",\n                \"<a:RequestId i:nil='true' />\",\n                \"<a:RequestName>Disassociate</a:RequestName>\",\n                \"</request>\"\n            ].join(\"\");\n\n            var async = !!internalCallback;\n\n            return this.doSoapRequest(request, \"Execute\", async, function (resultXml: any) {\n                var responseText = selectSingleNodeText(resultXml, \"//ser:ExecuteResult\");\n                var result = crmXmlDecode(responseText);\n                if (!async)\n                    return result;\n                else\n                    internalCallback(result);\n                // ReSharper disable NotAllPathsReturnValue\n            });\n            // ReSharper restore NotAllPathsReturnValue\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.disassociate\")\n        }\n    };\n}\n\n","import { GlobalContext } from \"../Context/GlobalContext/globalcontext\"\nimport { logger } from \"../Logger/logger\";\nimport { executeRequest, getFetchResult, injectPagingDetails, xmlEncode, $ } from \"./common\";\nimport { ISoapFetchKit } from \"./fetchKit.interface\";\n\nexport class FetchKit extends GlobalContext implements ISoapFetchKit {\n    constructor() {\n        super()\n    }\n\n    fetchMore = (fetchxml: any, opt_asyn: boolean) => {\n        try {\n            return _fetchMore(this.getClientUrl(), fetchxml, opt_asyn)\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.fetchMore\")\n        }\n    }\n\n    fetchAll = (fetchxml: any, opt_page: any) => {\n        try {\n            return _fetchAll(this.getClientUrl(), fetchxml, opt_page)\n\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.fetchAll\")\n        }\n    }\n\n    fetch = (fetchxml: any, opt_asyn: boolean) => {\n        try {\n            return _fetch(this.getClientUrl(), fetchxml, opt_asyn);\n        }\n        catch (e: any) {\n            logger.Critical(e.message, \"SOAP.fetch\")\n        }\n    }\n}\n\n/// Aync-only: Loads all records (recursive with paging cookie)\n///\nconst _fetchAll = (clientUrl: string, fetchxml: any, opt_page: any) => {\n    // defered object\n    var dfd = $.Deferred(),\n        allRecords: any = [],\n        page = opt_page || 1;\n    // execute the fetch an receive the details (paging-cookie..)\n    _fetchMore(clientUrl, fetchxml, true).then(function (result: any) {\n        // add the elements to the collection\n        allRecords = allRecords.concat(result.entities);\n        if (result.moreRecords) {\n            // increase the page-number\n            page++;\n            // add page-number & paging-cookie\n            var paging_fetchxml = injectPagingDetails(fetchxml, page, result.pagingCookie);\n            // recursive call\n            _fetchAll(clientUrl, paging_fetchxml, page).then(function (collection: any) {\n                // add the items to the collection\n                allRecords = allRecords.concat(collection);\n                dfd.resolve(allRecords);\n            }, dfd.reject);\n        }\n        else {\n            dfd.resolve(allRecords);\n        }\n    }, dfd.reject);\n    return dfd.promise();\n}\n\nconst _fetchMore = (clientUrl: string, fetchxml: any, opt_asyn: boolean) => {\n    // default is true\n    opt_asyn = (opt_asyn === false) ? false : true;\n    // defered object\n    var dfd = $.Deferred(),\n        request = ['<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">',\n            ' <s:Body>',\n            '  <Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">',\n            '     <request i:type=\"b:RetrieveMultipleRequest\" xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\" ',\n            '         xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">',\n            '             <b:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">',\n            '             <b:KeyValuePairOfstringanyType>',\n            '                 <c:key>Query</c:key>',\n            '                 <c:value i:type=\"b:FetchExpression\">',\n            '                     <b:Query>',\n            xmlEncode(fetchxml),\n            '                     </b:Query>',\n            '                 </c:value>',\n            '             </b:KeyValuePairOfstringanyType>',\n            '         </b:Parameters>',\n            '         <b:RequestId i:nil=\"true\"/>',\n            '         <b:RequestName>RetrieveMultiple</b:RequestName>',\n            '     </request>',\n            ' </Execute>',\n            '</s:Body></s:Envelope>'].join('');\n    executeRequest(clientUrl, request, opt_asyn).then(function (data: any) {\n        dfd.resolve(getFetchResult(data));\n    }, dfd.reject);\n    // return the promise object\n    return dfd.promise();\n}\n\n///\n/// Executes a fetch-request an returns a promies object\n///\nconst _fetch = (clientUrl: string, fetchxml: any, opt_asyn: boolean) => {\n    // default is true\n    opt_asyn = (opt_asyn === false) ? false : true;\n    // defered object\n    var dfd = $.Deferred();\n    _fetchMore(clientUrl, fetchxml, opt_asyn).then(function (result: any) {\n        dfd.resolve(result.entities);\n    })\n        .fail(dfd.reject);\n    return dfd.promise();\n}\n","import { Constants, SOAP_TYPE } from \"../../Constant/constants\";\nimport { crmXmlEncode, encodeValue, getNodeText, isArray, stringToDate } from \"./common\";\n\nexport class EntityReference {\n    id: any;\n    name: any;\n    entityType: any;\n    constructor(entityType: string, id: string, name: string) {\n        this.id = id || Constants.EmptyGuid;\n        this.name = name || \"\";\n        this.entityType = entityType || \"\";\n    }\n}\n\nexport class Entity {\n    logicalName: string;\n    attributes: any;\n    formattedValues: {};\n    id: any;\n    constructor(logicalName: string, id: string, attributes: any) {\n        this.logicalName = logicalName || \"\";\n        this.attributes = attributes || {};\n        this.formattedValues = {};\n        this.id = id || Constants.EmptyGuid;\n    }\n}\nexport class XrmOptionSetValue {\n    value: any | undefined;\n    formattedValue: any | undefined;\n    type: any;\n    constructor() {\n        this.type = 'OptionSetValue';\n    }\n}\nexport class XrmEntityReference {\n    id: string | undefined\n    logicalName: string | undefined\n    name: string | undefined\n    type = 'EntityReference';\n}\n\nexport class XrmEntityCollection {\n    value: any\n    type: string = 'EntityCollection';\n}\n\nexport class XrmValue {\n    type: any;\n    value: any;\n}\n\nexport class Attribute {\n    value: string | null;\n    type: string;\n    constructor(value: string, type: string) {\n        this.value = value != undefined ? value : null;\n        this.type = type || \"\";\n    }\n}\n\n\nexport class BusinessEntity {\n    id: any = null;\n    logicalName: any = null;\n    attributes: any = {};\n    constructor(logicalName?: string, id?: string) {\n        this.logicalName = logicalName;\n        this.id = id\n    }\n\n    getValue = (attrname: any, opt_property: any) => {\n        var attr = this.attributes[attrname];\n        if (attr) {\n            var attrType = attr.type;\n\n            switch (attrType) {\n                case SOAP_TYPE.EntityReference:\n                    return (opt_property !== undefined) ? attr[opt_property] : attr.guid;\n                case SOAP_TYPE.OptionSet:\n                    return (opt_property !== undefined) ? attr[opt_property] : attr.value;\n                default:\n                    return attr.value;\n            }\n        }\n        return null;\n    };\n    /**\n            * Serialize a CRM Business Entity object to XML string in order to be passed to CRM Web Services.\n            * @return {String} The serialized XML string of CRM entity.\n            */\n    serialize = () => {\n        var xml = [\"<b:value i:type='a:Entity'>\"];\n        xml.push('<a:Attributes xmlns:b=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">');\n        var attributes = this.attributes;\n        for (var attributeName in attributes) {\n            if (attributes.hasOwnProperty(attributeName)) {\n                var attribute = attributes[attributeName];\n\n                xml.push(\"<a:KeyValuePairOfstringanyType>\");\n                xml.push(\"<b:key>\", attributeName, \"</b:key>\");\n\n                if (attribute === null || attribute.value === null) {\n                    xml.push(\"<b:value i:nil='true' />\");\n                } else {\n                    var sType = (!attribute.type) ?\n                        typeof attribute :\n                        crmXmlEncode(attribute.type);\n                    var value;\n                    var encodedValue;\n                    var id;\n                    var encodedId;\n                    var logicalName;\n                    var encodedLogicalName;\n                    switch (sType) {\n                        case \"OptionSetValue\":\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            encodedValue = encodeValue(value);\n                            xml.push(\"<b:value i:type='a:OptionSetValue'>\");\n                            xml.push(\"<a:Value>\", encodedValue, \"</a:Value>\", \"</b:value>\");\n                            break;\n\n                        case \"EntityCollection\":\n                            xml.push(\"<b:value i:type='a:EntityCollection'>\");\n                            xml.push(\"<a:Entities>\");\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            var collections = isArray(value) ? value : [value];\n\n                            for (var i = 0, collectionLengh = collections.length; i < collectionLengh; i++) {\n                                var item = collections[i];\n                                id = (item.hasOwnProperty(\"id\")) ? item[\"id\"] : item;\n                                encodedId = encodeValue(id);\n                                logicalName = (item.hasOwnProperty(\"logicalName\")) ? item[\"logicalName\"] : item;\n                                encodedLogicalName = encodeValue(logicalName);\n                                xml.push(\"<a:Entity>\");\n                                xml.push(\"<a:Attributes>\");\n                                xml.push(\"<a:KeyValuePairOfstringanyType>\");\n                                xml.push(\"<b:key>partyid</b:key>\");\n                                xml.push(\"<b:value i:type='a:EntityReference'>\");\n                                xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n                                if (Xrm.Utility.openQuickCreate !== undefined) {\n                                    xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n                                }\n                                xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n                                xml.push(\"<a:Name i:nil='true' />\");\n                                if (Xrm.Utility.openQuickCreate !== undefined) {\n                                    xml.push(\"<a:RowVersion i:nil='true' />\");\n                                }\n                                xml.push(\"</b:value>\");\n                                xml.push(\"</a:KeyValuePairOfstringanyType>\");\n                                xml.push(\"</a:Attributes>\");\n                                xml.push(\"<a:EntityState i:nil='true' />\");\n                                xml.push(\"<a:FormattedValues />\");\n                                xml.push(\"<a:Id>00000000-0000-0000-0000-000000000000</a:Id>\");\n                                xml.push(\"<a:LogicalName>activityparty</a:LogicalName>\");\n                                xml.push(\"<a:RelatedEntities />\");\n                                xml.push(\"</a:Entity>\");\n                            }\n                            xml.push(\"</a:Entities>\");\n                            xml.push(\"<a:EntityName i:nil='true' />\");\n                            xml.push(\"<a:MinActiveRowVersion i:nil='true' />\");\n                            xml.push(\"<a:MoreRecords>false</a:MoreRecords>\");\n                            xml.push(\"<a:PagingCookie i:nil='true' />\");\n                            xml.push(\"<a:TotalRecordCount>0</a:TotalRecordCount>\");\n                            xml.push(\"<a:TotalRecordCountLimitExceeded>false</a:TotalRecordCountLimitExceeded>\");\n                            xml.push(\"</b:value>\");\n                            break;\n\n                        case \"EntityReference\":\n                            id = (attribute.hasOwnProperty(\"id\")) ? attribute[\"id\"] : attribute;\n                            encodedId = encodeValue(id);\n                            logicalName = (attribute.hasOwnProperty(\"logicalName\")) ? attribute[\"logicalName\"] : attribute;\n                            encodedLogicalName = encodeValue(logicalName);\n                            xml.push(\"<b:value i:type='a:EntityReference'>\");\n                            xml.push(\"<a:Id>\", encodedId, \"</a:Id>\");\n                            if (Xrm.Utility.openQuickCreate !== undefined) {\n                                xml.push(\"<a:KeyAttributes xmlns:c='http://schemas.microsoft.com/xrm/7.1/Contracts' />\");\n                            }\n                            xml.push(\"<a:LogicalName>\", encodedLogicalName, \"</a:LogicalName>\");\n                            xml.push(\"<a:Name i:nil='true' />\");\n                            if (Xrm.Utility.openQuickCreate !== undefined) {\n                                xml.push(\"<a:RowVersion i:nil='true' />\");\n                            }\n                            xml.push(\"</b:value>\");\n                            break;\n\n                        case \"Money\":\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            encodedValue = encodeValue(value);\n                            xml.push(\"<b:value i:type='a:Money'>\");\n                            xml.push(\"<a:Value>\", encodedValue, \"</a:Value>\", \"</b:value>\");\n                            break;\n\n                        case \"guid\":\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            encodedValue = encodeValue(value);\n                            xml.push(\"<b:value i:type='c:guid' xmlns:c='http://schemas.microsoft.com/2003/10/Serialization/'>\");\n                            xml.push(encodedValue, \"</b:value>\");\n                            break;\n\n                        case \"number\":\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            encodedValue = encodeValue(value);\n                            var oType = (String(parseInt(value, 10)) === encodedValue) ? \"c:int\" : \"c:decimal\";\n                            xml.push(\"<b:value i:type='\", oType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\");\n                            xml.push(encodedValue, '</b:value>');\n                            break;\n\n                        default:\n                            value = (attribute.hasOwnProperty(\"value\")) ? attribute[\"value\"] : attribute;\n                            encodedValue = encodeValue(value);\n                            sType = (typeof value === \"object\" && value.getTime) ? \"dateTime\" : sType;\n                            xml.push(\"<b:value i:type='c:\", sType, \"' xmlns:c='http://www.w3.org/2001/XMLSchema'>\", encodedValue, \"</b:value>\");\n                            break;\n                    }\n                }\n                xml.push(\"</a:KeyValuePairOfstringanyType>\");\n            }\n        }\n\n        xml.push(\"</a:Attributes><a:EntityState i:nil='true' />\");\n        xml.push(\"<a:FormattedValues xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n        xml.push(\"<a:Id>\", encodeValue(this.id), \"</a:Id>\");\n        xml.push(\"<a:LogicalName>\", this.logicalName, \"</a:LogicalName>\");\n        xml.push(\"<a:RelatedEntities xmlns:b='http://schemas.datacontract.org/2004/07/System.Collections.Generic' />\");\n        xml.push(\"</b:value>\");\n        return xml.join(\"\");\n    }\n\n    /**\n         * Deserialize an XML node into a CRM Business Entity object. The XML node comes from CRM Web Service's response.\n         * @param {object} resultNode The XML node returned from CRM Web Service's Fetch, Retrieve, RetrieveMultiple messages.\n         */\n    deserialize = (resultNode: any) => {\n        var obj: any = new Object();\n        var resultNodes = resultNode.childNodes;\n\n        for (var j = 0, lenj = resultNodes.length; j < lenj; j++) {\n            var sKey;\n            var parentNode = resultNodes[j];\n            switch (parentNode.nodeName) {\n                case \"a:Attributes\":\n                    var attr = parentNode;\n                    for (var k = 0, lenk = attr.childNodes.length; k < lenk; k++) {\n                        var tempParentNode = attr.childNodes[k];\n                        // Establish the Key for the Attribute\n                        var tempParentNodeChildNodes = tempParentNode.childNodes;\n                        sKey = getNodeText(tempParentNodeChildNodes[0]);\n\n                        var tempNode = tempParentNodeChildNodes[1];\n                        // Determine the Type of Attribute value we should expect\n                        var sType = tempNode.attributes.getNamedItem(\"i:type\").value;\n\n                        // check for AliasedValue\n                        if (sType.replace('c:', '').replace('a:', '') === \"AliasedValue\") {\n                            // reset the type to the actual attribute type\n                            var subNode = tempNode.childNodes[2];\n                            sType = subNode.attributes.getNamedItem(\"i:type\").value;\n\n                            //sKey = getNodeText(tempNode.childNodes[1]) + \".\" + getNodeText(tempNode.childNodes[0]);\n                            // reset the node to the AliasedValue value node\n                            tempNode = subNode;\n                        }\n\n                        var entRef;\n                        var entCv;\n                        switch (sType) {\n                            case \"a:OptionSetValue\":\n                                var entOsv = new XrmOptionSetValue();\n                                entOsv.type = sType.replace('a:', '');\n                                entOsv.value = parseInt(getNodeText(tempNode));\n                                obj[sKey] = entOsv;\n                                break;\n\n                            case \"a:EntityReference\":\n                                entRef = new XrmEntityReference();\n                                entRef.type = sType.replace('a:', '');\n                                var oChildNodes = tempNode.childNodes;\n                                for (let i = 0, leni = oChildNodes.length; i < leni; i++) {\n                                    var entityReferenceNode = oChildNodes[i];\n\n                                    switch (entityReferenceNode.nodeName) {\n                                        case \"a:Id\":\n                                            entRef.id = getNodeText(entityReferenceNode);\n                                            break;\n                                        case \"a:LogicalName\":\n                                            entRef.logicalName = getNodeText(entityReferenceNode);\n                                            break;\n                                        case \"a:Name\":\n                                            entRef.name = getNodeText(entityReferenceNode);\n                                            break;\n                                    }\n                                }\n                                obj[sKey] = entRef;\n                                break;\n\n                            case \"a:EntityCollection\":\n                                entRef = new XrmEntityCollection();\n                                entRef.type = sType.replace('a:', '');\n\n                                //get all party items....\n                                var items = [];\n                                var partyNodes = tempNode.childNodes;\n                                for (var y = 0, leny = partyNodes[0].childNodes.length; y < leny; y++) {\n                                    var itemNodes = tempParentNode.childNodes[1].childNodes[0].childNodes[y].childNodes[0].childNodes;\n                                    for (var z = 0, lenz = itemNodes.length; z < lenz; z++) {\n                                        var itemNodeChildNodes = itemNodes[z].childNodes;\n                                        var nodeText = getNodeText(itemNodeChildNodes[0]);\n                                        if (nodeText === \"partyid\") {\n                                            var itemRef = new XrmEntityReference();\n                                            var partyListNodes = itemNodeChildNodes[1].childNodes;\n                                            for (var pi = 0, lenpi = partyListNodes.length; pi < lenpi; pi++) {\n                                                var partyReferenceNode = partyListNodes[pi];\n\n                                                switch (partyReferenceNode.nodeName) {\n                                                    case \"a:Id\":\n                                                        itemRef.id = getNodeText(partyReferenceNode);\n                                                        break;\n                                                    case \"a:LogicalName\":\n                                                        itemRef.logicalName = getNodeText(partyReferenceNode);\n                                                        break;\n                                                    case \"a:Name\":\n                                                        itemRef.name = getNodeText(partyReferenceNode);\n                                                        break;\n                                                }\n                                            }\n                                            items[y] = itemRef;\n                                        }\n                                    }\n                                }\n                                entRef.value = items;\n                                obj[sKey] = entRef;\n                                break;\n\n                            case \"a:Money\":\n                                entCv = new XrmValue();\n                                entCv.type = sType.replace('a:', '');\n                                entCv.value = parseFloat(getNodeText(tempNode));\n                                obj[sKey] = entCv;\n                                break;\n\n                            default:\n                                entCv = new XrmValue();\n                                entCv.type = sType.replace('c:', '').replace('a:', '');\n                                if (entCv.type === \"int\") {\n                                    entCv.value = parseInt(getNodeText(tempNode));\n                                } else if (entCv.type === \"decimal\" || entCv.type === \"double\") {\n                                    entCv.value = parseFloat(getNodeText(tempNode));\n                                } else if (entCv.type === \"dateTime\") {\n                                    entCv.value = stringToDate(getNodeText(tempNode));\n                                } else if (entCv.type === \"boolean\") {\n                                    entCv.value = (getNodeText(tempNode) === 'false') ? false : true;\n                                } else {\n                                    entCv.value = getNodeText(tempNode);\n                                }\n                                obj[sKey] = entCv;\n                                break;\n                        }\n                    }\n                    this.attributes = obj;\n                    break;\n\n                case \"a:Id\":\n                    this.id = getNodeText(parentNode);\n                    break;\n\n                case \"a:LogicalName\":\n                    this.logicalName = getNodeText(parentNode);\n                    break;\n\n                case \"a:FormattedValues\":\n                    var foVal = parentNode;\n\n                    for (var o = 0, leno = foVal.childNodes.length; o < leno; o++) {\n                        // Establish the Key, we are going to fill in the formatted value of the already found attribute\n                        var foNode = foVal.childNodes[o];\n                        sKey = getNodeText(foNode.childNodes[0]);\n                        this.attributes[sKey].formattedValue = getNodeText(foNode.childNodes[1]);\n                        if (isNaN(this.attributes[sKey].value) && this.attributes[sKey].type === \"dateTime\") {\n                            this.attributes[sKey].value = new Date(this.attributes[sKey].formattedValue);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n\n}\n\n","import { SOAP_CONSTS } from \"../../Constant/constants\";\nimport { GlobalContext } from \"../Context/GlobalContext/globalcontext\";\n// import { logger } from \"../Logger/logger\";\nimport { getChildNode, getChildNodes, getNodeTextValue, getNodeTextValueNotNull, getValue, getXmlValue } from \"./common\";\nimport { ISoapProcess } from \"./process.interface\";\n\n\nexport class Process extends GlobalContext implements ISoapProcess {\n    constructor() {\n        super()\n    }\n\n    // This can be used to execute custom requests if needed - useful for me testing the SOAP :)\n    public callActionBase(requestXml: any, successCallback: any, errorCallback: any, asyn: boolean) {\n        try {\n            let req: any = new XMLHttpRequest();\n            req.open(SOAP_CONSTS.HTTP_METHOD.POST, this.getClientUrl() + SOAP_CONSTS.SOAP_ENDPOINT, asyn != false);\n            req.setRequestHeader(SOAP_CONSTS.ACCEPT_TYPE.text, SOAP_CONSTS.ACCEPT_TYPE.value.XML);\n            req.setRequestHeader(SOAP_CONSTS.CONTENT_TYPE.text, SOAP_CONSTS.CONTENT_TYPE.value.XML);\n            req.setRequestHeader(SOAP_CONSTS.SOAP_ACTION.text, SOAP_CONSTS.SOAP_ACTION.value);\n            req.onreadystatechange = function () {\n                if (req.readyState == 4) {\n                    if (req.status == 200) {\n                        // If there's no successCallback we don't need to check the outputParams\n                        if (successCallback) {\n                            // Yucky but don't want to risk there being multiple 'Results' nodes or something\n                            var resultsNode = req.responseXML.childNodes[0].childNodes[0].childNodes[0].childNodes[0].childNodes[1]; // <a:Results>\n                            // Action completed successfully - get output params\n                            var responseParams = getChildNodes(resultsNode, \"a:KeyValuePairOfstringanyType\");\n                            var outputParams: any = {};\n                            for (let i = 0; i < responseParams.length; i++) {\n                                var attrNameNode = getChildNode(responseParams[i], \"b:key\");\n                                var attrValueNode = getChildNode(responseParams[i], \"b:value\");\n                                var attributeName = getNodeTextValue(attrNameNode);\n                                var attributeValue = getValue(attrValueNode);\n                                // v1.0 - Deprecated method using key/value pair and standard array\n                                //outputParams.push({ key: attributeName, value: attributeValue.value });\n                                // v2.0 - Allows accessing output params directly: outputParams[\"Target\"].attributes[\"new_fieldname\"];\n                                outputParams[attributeName] = attributeValue.value;\n                                /*\n                                RETURN TYPES:\n                                    DateTime = Users local time (JavaScript date)\n                                    bool = true or false (JavaScript boolean)\n                                    OptionSet, int, decimal, float, etc = 1 (JavaScript number)\n                                    guid = string\n                                    EntityReference = { id: \"guid\", name: \"name\", entityType: \"account\" }\n                                    Entity = { logicalName: \"account\", id: \"guid\", attributes: {}, formattedValues: {} }\n                                    EntityCollection = [{ logicalName: \"account\", id: \"guid\", attributes: {}, formattedValues: {} }]\n                                Attributes for entity accessed like: entity.attributes[\"new_fieldname\"].value\n                                For entityreference: entity.attributes[\"new_fieldname\"].value.id\n                                Make sure attributes[\"new_fieldname\"] is not null before using .value\n                                Or use the extension method entity.get(\"new_fieldname\") to get the .value\n                                Also use entity.formattedValues[\"new_fieldname\"] to get the string value of optionsetvalues, bools, moneys, etc\n                                */\n                            }\n                            // Make sure the callback accepts exactly 1 argument - use dynamic function if you want more\n                            successCallback(outputParams);\n                        }\n                    }\n                    else {\n                        // Error has occured, action failed\n                        if (errorCallback) {\n                            var message = null;\n                            var traceText = null;\n                            try {\n                                message = getNodeTextValueNotNull(req.responseXML.getElementsByTagName(\"Message\"));\n                                traceText = getNodeTextValueNotNull(req.responseXML.getElementsByTagName(\"TraceText\"));\n                            } catch (e) { }\n                            if (message == null) { message = \"Error executing Action. Check input parameters or contact your CRM Administrator\"; }\n                            errorCallback(message, traceText);\n                        }\n                    }\n                }\n            };\n            req.send(requestXml);\n        }\n        catch (e) {\n            // logger.Critical(e.message, \"SOAP.callActionBase\")\n        }\n    }\n\n    public callAction(actionName: string, inputParams: any, successCallback: any, errorCallback: any, asyn: boolean) {\n\n        try {\n            var ns: any = {\n                \"\": \"http://schemas.microsoft.com/xrm/2011/Contracts/Services\",\n                \":s\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n                \":a\": \"http://schemas.microsoft.com/xrm/2011/Contracts\",\n                \":i\": \"http://www.w3.org/2001/XMLSchema-instance\",\n                \":b\": \"http://schemas.datacontract.org/2004/07/System.Collections.Generic\",\n                \":c\": \"http://www.w3.org/2001/XMLSchema\",\n                \":d\": \"http://schemas.microsoft.com/xrm/2011/Contracts/Services\",\n                \":e\": \"http://schemas.microsoft.com/2003/10/Serialization/\",\n                \":f\": \"http://schemas.microsoft.com/2003/10/Serialization/Arrays\",\n                \":g\": \"http://schemas.microsoft.com/crm/2011/Contracts\",\n                \":h\": \"http://schemas.microsoft.com/xrm/2011/Metadata\",\n                \":j\": \"http://schemas.microsoft.com/xrm/2011/Metadata/Query\",\n                \":k\": \"http://schemas.microsoft.com/xrm/2013/Metadata\",\n                \":l\": \"http://schemas.microsoft.com/xrm/2012/Contracts\",\n                //\":c\": \"http://schemas.microsoft.com/2003/10/Serialization/\" // Conflicting namespace for guid... hardcoding in the _getXmlValue bit\n            };\n            var requestXml = \"<s:Envelope\";\n            // Add all the namespaces\n            for (var i in ns) {\n                requestXml += \" xmlns\" + i + \"='\" + ns[i] + \"'\";\n            }\n            requestXml += \">\" +\n                \"<s:Body>\" +\n                \"<Execute>\" +\n                \"<request>\";\n            if (inputParams != null && inputParams.length > 0) {\n                requestXml += \"<a:Parameters>\";\n                // Add each input param\n                for (let i = 0; i < inputParams.length; i++) {\n                    var param = inputParams[i];\n                    var value = getXmlValue(param.key, param.type, param.value);\n                    requestXml += value;\n                }\n                requestXml += \"</a:Parameters>\";\n            }\n            else {\n                requestXml += \"<a:Parameters />\";\n            }\n            requestXml += \"<a:RequestId i:nil='true' />\" +\n                \"<a:RequestName>\" + actionName + \"</a:RequestName>\" +\n                \"</request>\" +\n                \"</Execute>\" +\n                \"</s:Body>\" +\n                \"</s:Envelope>\";\n            this.callActionBase(requestXml, successCallback, errorCallback, asyn);\n        }\n        catch (e) {\n            // logger.Critical(e.message, \"SOAP.callAction\")\n        }\n    }\n\n    public callWorkflow(workflowId: string, recordId: string, successCallback: any, errorCallback: any, asyn: boolean) {\n        try {\n            var request = \"<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>\" +\n                \"<s:Body>\" +\n                \"<Execute xmlns='http://schemas.microsoft.com/xrm/2011/Contracts/Services' xmlns:i='http://www.w3.org/2001/XMLSchema-instance'>\" +\n                \"<request i:type='b:ExecuteWorkflowRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts' xmlns:b='http://schemas.microsoft.com/crm/2011/Contracts'>\" +\n                \"<a:Parameters xmlns:c='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>\" +\n                \"<a:KeyValuePairOfstringanyType>\" +\n                \"<c:key>EntityId</c:key>\" +\n                \"<c:value i:type='d:guid' xmlns:d='http://schemas.microsoft.com/2003/10/Serialization/'>\" + recordId + \"</c:value>\" +\n                \"</a:KeyValuePairOfstringanyType>\" +\n                \"<a:KeyValuePairOfstringanyType>\" +\n                \"<c:key>WorkflowId</c:key>\" +\n                \"<c:value i:type='d:guid' xmlns:d='http://schemas.microsoft.com/2003/10/Serialization/'>\" + workflowId + \"</c:value>\" +\n                \"</a:KeyValuePairOfstringanyType>\" +\n                \"</a:Parameters>\" +\n                \"<a:RequestId i:nil='true' />\" +\n                \"<a:RequestName>ExecuteWorkflow</a:RequestName>\" +\n                \"</request>\" +\n                \"</Execute>\" +\n                \"</s:Body>\" +\n                \"</s:Envelope>\";\n            var req = new XMLHttpRequest();\n            req.open(SOAP_CONSTS.HTTP_METHOD.POST, this.getClientUrl() + SOAP_CONSTS.SOAP_ENDPOINT, asyn != false);\n            req.setRequestHeader(SOAP_CONSTS.ACCEPT_TYPE.text, SOAP_CONSTS.ACCEPT_TYPE.value.XML);\n            req.setRequestHeader(SOAP_CONSTS.CONTENT_TYPE.text, SOAP_CONSTS.CONTENT_TYPE.value.XML);\n            req.setRequestHeader(SOAP_CONSTS.SOAP_ACTION.text, SOAP_CONSTS.SOAP_ACTION.value);\n            req.onreadystatechange = function () {\n                if (req.readyState == 4) {\n                    if (req.status == 200) {\n                        if (successCallback) {\n                            successCallback();\n                        }\n                    }\n                    else {\n                        if (errorCallback) {\n                            errorCallback();\n                        }\n                    }\n                }\n            };\n            req.send(request);\n        }\n        catch (e) {\n            // logger.Critical(e.message, \"SOAP.callAction\")\n        }\n    }\n}\n\n\n","import { EntityBase } from './entityBase';\r\nimport { FetchKit } from './fetchKit';\r\nimport { BusinessEntity } from './objectType';\r\nimport { Process } from './process';\r\n\r\nclass SOAP {\r\n  public _FetchKit: FetchKit = new FetchKit();\r\n  public _Process: Process = new Process();\r\n  public _EntityBase: EntityBase = new EntityBase();\r\n\r\n  public BusinessEntity = (logicalName?: string, id?: string) => {\r\n    return new BusinessEntity(logicalName, id);\r\n  };\r\n\r\n  public fetch = (fetchXml: string, async: boolean) => {\r\n    return this._FetchKit.fetch(fetchXml, async);\r\n  };\r\n  public fetchAll = (fetchXml: string, async: boolean) => {\r\n    return this._FetchKit.fetchAll(fetchXml, async);\r\n  };\r\n  public fetchMore = (fetchXml: string, async: boolean) => {\r\n    return this._FetchKit.fetchMore(fetchXml, async);\r\n  };\r\n\r\n  public callAction = (actionName: string, inputParams: any, successCallBack: any, errorCallback: any, async: boolean) => {\r\n    this._Process.callAction(actionName, inputParams, successCallBack, errorCallback, async);\r\n  };\r\n\r\n  public callWorkflow = (workflowId: string, recordId: string, successCallBack: any, errorCallback: any, async: boolean) => {\r\n    this._Process.callWorkflow(workflowId, recordId, successCallBack, errorCallback, async);\r\n  };\r\n\r\n  public setState(entityName: string, recordId: string, stateCode: number, statusCode: number, async: boolean, internalCallback: any) {\r\n    this._EntityBase.setState(entityName, recordId, stateCode, statusCode, async, internalCallback);\r\n  }\r\n\r\n  public assign(id: string, entityname: string, assigneeid: string, async: boolean) {\r\n    return this._EntityBase.assign(id, entityname, assigneeid, async);\r\n  }\r\n\r\n  public retrieve = (entityName: string, id: string, columnSet: any, async: boolean, internalCallback: any) => {\r\n    this._EntityBase.retrieve(entityName, id, columnSet, async, internalCallback);\r\n  };\r\n\r\n  public create = (be: any, internalCallback: any) => {\r\n    this._EntityBase.create(be, internalCallback);\r\n  };\r\n\r\n  public update = (be: any, internalCallback: any) => {\r\n    this._EntityBase.update(be, internalCallback);\r\n  };\r\n\r\n  public delete = (entityName: string, id: string, internalCallback: any) => {\r\n    this._EntityBase.delete(entityName, id, internalCallback);\r\n  };\r\n\r\n  public retrieveMultiple = (query: string, internalCallback: any) => {\r\n    this._EntityBase.retrieveMultiple(query, internalCallback);\r\n  };\r\n\r\n  public associate = (relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: string, internalCallback: any) => {\r\n    this._EntityBase.associate(relationshipName, targetEntityName, targetId, relatedEntityName, relatedBusinessEntities, internalCallback);\r\n  };\r\n\r\n  public disassociate = (relationshipName: string, targetEntityName: string, targetId: string, relatedEntityName: string, relatedBusinessEntities: string, internalCallback: any) => {\r\n    this._EntityBase.disassociate(relationshipName, targetEntityName, targetId, relatedEntityName, relatedBusinessEntities, internalCallback);\r\n  };\r\n}\r\n\r\nexport const _SOAP = new SOAP();\r\n","import { _Entity } from './../Entity/entity';\r\nimport { Constants } from '../../Constant/constants';\r\nimport { _Attributes } from '../Attributes/attributes';\r\nimport { _GlobalContext } from '../Context/GlobalContext/globalcontext';\r\nimport { _Validation } from '../Validation/validation';\r\nimport { _OData } from './../OData/odata';\r\nimport { _Navigate } from '../Navigate/navigate';\r\nimport { IAlertStrings } from '../Navigate/DialogStrings/alert-strings.interface';\r\nimport { IConfirmStrings } from '../Navigate/DialogStrings/confirm-strings.interface';\r\nimport { Messages } from '../../Messages/messages';\r\nimport { logger } from '../Logger/logger';\r\nimport { _Controls } from '../Controls/controls';\r\nimport { Xrm } from \"../../Constant/constants\"\r\n\r\nimport { Helpers } from '../Logger/utils/helpers';\r\nimport { LogData } from '../Logger/contracts/log-data';\r\nimport { LogLevel } from '../Logger/abstractions/log-level';\r\nclass Utility {\r\n    public getQueryStringParameter = (paramToRetrieve: string): string => {\r\n        if (location.search != '') {\r\n            let params = window.location.search?.split('?')[1].split('&');\r\n            if (Array.isArray(params)) {\r\n                for (let i = 0; i < params.length; i = i + 1) {\r\n                    let singleParam = params[i].split('=');\r\n                    if (singleParam[0] === paramToRetrieve) {\r\n                        return decodeURIComponent(singleParam[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    public queryStringParameterToObject = (paramToRetrieve: string): {} => {\r\n        let query = this.getQueryStringParameter(paramToRetrieve);\r\n        if (query) {\r\n            let obj: any = {};\r\n            let vals = query.split('&');\r\n            for (let i in vals) {\r\n                let item = vals[i].replace(/\\+/g, ' ').split('=');\r\n                for (let i = 0; i < item.length; i++) {\r\n                    obj[item[i]] = item[i + 1];\r\n                    break;\r\n                }\r\n            }\r\n            return obj;\r\n        }\r\n        return {};\r\n    };\r\n    public createFetchXml = (fetchXml: string, pagingCookie: string, page: number, count: number) => {\r\n        var domParser = new DOMParser();\r\n        var xmlSerializer = new XMLSerializer();\r\n\r\n        var fetchXmlDocument = domParser.parseFromString(fetchXml, 'text/xml');\r\n\r\n        if (page) {\r\n            fetchXmlDocument.getElementsByTagName('fetch')[0].setAttribute('page', page.toString());\r\n        }\r\n\r\n        if (count) {\r\n            fetchXmlDocument.getElementsByTagName('fetch')[0].setAttribute('count', count.toString());\r\n        }\r\n\r\n        if (pagingCookie) {\r\n            var cookieDoc = domParser.parseFromString(pagingCookie, 'text/xml');\r\n            if (cookieDoc) {\r\n                var innerPagingCookie = domParser.parseFromString(decodeURIComponent(decodeURIComponent(cookieDoc.getElementsByTagName('cookie')[0].getAttribute('pagingcookie') ?? '')), 'text/xml');\r\n                fetchXmlDocument.getElementsByTagName('fetch')[0].setAttribute('paging-cookie', xmlSerializer.serializeToString(innerPagingCookie));\r\n            }\r\n        }\r\n\r\n        return xmlSerializer.serializeToString(fetchXmlDocument);\r\n    };\r\n    public initLookup = (entityType: string, id: string, name?: string) => [{ entityType, id, name }];\r\n    public guidEmpty = () => '00000000-0000-0000-0000-000000000000';\r\n    public removeBrackets = (guid: string) => guid.replace(/[{}]/gi, '');\r\n    /**\r\n     * Mapping attribute value from fetchXml to current form's attributes\r\n     * @param entityLogicalName\r\n     * @param fetchXml\r\n     * @returns\r\n     * All attributes in fetchxml must be named alias same attribute name on current form\r\n     */\r\n    public autoMappingValue = async (entityLogicalName: string, fetchXml: string, lookupName?: string): Promise<any> => {\r\n        if (typeof lookupName === 'string') {\r\n        }\r\n        if (fetchXml && !_Validation.isFetchXml(fetchXml)) return;\r\n        let result = await _OData.retrieveMultipleRecords(entityLogicalName, fetchXml);\r\n        if (result && result.entities && result.entities[0]) {\r\n            let entity = result.entities[0];\r\n            let keys = Object.keys(entity);\r\n            var fields = keys.filter((k) => k.indexOf('@') < 0);\r\n\r\n            for (let field of fields) {\r\n                let attrName = field;\r\n                try {\r\n                    if (field.startsWith('_') && field.endsWith('_value')) attrName = field.substring(1, field.length - 6);\r\n                    let attr = _Attributes.getAttribute(attrName);\r\n                    let type = attr.getAttributeType();\r\n                    switch (type) {\r\n                        case 'boolean':\r\n                        case 'decimal':\r\n                        case 'double':\r\n                        case 'integer':\r\n                        case 'memo':\r\n                        case 'money':\r\n                        case 'optionset':\r\n                        case 'string':\r\n                            attr.setValue(entity[field]);\r\n                            break;\r\n                        case 'datetime':\r\n                            attr.setValue(new Date(entity[field]));\r\n                            break;\r\n                        case 'lookup':\r\n                            attr.setValue(this.initLookup(entity[field + Constants.ODataLookupLogicalName], entity[field], entity[field + Constants.ODataFormattedValue]));\r\n                            break;\r\n                        case 'multiselectoptionset':\r\n                            var options: string[] = entity[field].split(',');\r\n                            attr.setValue(options.map((op) => parseInt(op)));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                } catch (ex: any) {\r\n                    console.log(`[Error]: ${attrName}\\n${ex.message}`);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    public calculateAge = (dob: string | Date, exactDate: boolean = true) => {\r\n        let age = 0;\r\n        let birthDate = new Date(dob);\r\n        if (birthDate) {\r\n            var currentDate = new Date();\r\n            var date = birthDate.getDate();\r\n            var month = birthDate.getMonth();\r\n            var year = birthDate.getFullYear();\r\n            age = currentDate.getFullYear() - year;\r\n\r\n            if (exactDate) {\r\n                if (month > currentDate.getMonth() || (month === currentDate.getMonth() && date > currentDate.getDate())) age -= 1;\r\n            }\r\n        }\r\n        return age;\r\n    };\r\n    public getCurrentUserRoles = (): [{ id: string; name: string }] => {\r\n        return _GlobalContext.userSettings.roles.get();\r\n    };\r\n    public checkUserHaveRoles = (roleNames: string[]): boolean => {\r\n        if (!Array.isArray(roleNames)) return false;\r\n\r\n        let roles: [{ id: string; name: string }] = this.getCurrentUserRoles();\r\n        return roleNames.some((roleName) => roles.some((role) => role.name === roleName));\r\n    };\r\n    public getEntityMetadata = (entityName: string, attributes?: string[]): Promise<any> => {\r\n        return Xrm.Utility.getEntityMetadata(entityName, attributes);\r\n    }\r\n    public clickRibbonButton = async (text: string, title?: string) => {\r\n        if (_Entity.getIsDirty()) {\r\n            let alertStrings: IAlertStrings = <IAlertStrings>{};\r\n            alertStrings.text = Messages.get('MS006');\r\n\r\n            _Navigate.openAlertDialog(alertStrings);\r\n            return false;\r\n        }\r\n        let confirmStrings: IConfirmStrings = <IConfirmStrings>{};\r\n        confirmStrings.text = text;\r\n        confirmStrings.title = title;\r\n        return _Navigate.openConfirmDialog(confirmStrings);\r\n    };\r\n    public isSameGuId = (guid1: string, guid2: string): boolean => {\r\n        try {\r\n            return this.removeBrackets(guid1).toUpperCase() === this.removeBrackets(guid2).toUpperCase();\r\n        } catch (ex: any) {\r\n            logger.Warn(ex.message);\r\n            return false;\r\n        }\r\n    };\r\n    public showProgressIndicator = (message: string) => Xrm.Utility.showProgressIndicator(message);\r\n    public closeProgressIndicator = () => Xrm.Utility.closeProgressIndicator();\r\n    public reFreshIframe = (controlName: string) => {\r\n        var subgrid = _Controls.getControl(controlName)\r\n        if (subgrid) {\r\n            var src = subgrid.getSrc();\r\n            subgrid.setSrc(\"_blank\");\r\n            subgrid.setSrc(src);\r\n        }\r\n    }\r\n    public getLookupValue = (fieldName: string) => {\r\n        var value = null;\r\n        var attr = _Attributes.getAttribute(fieldName)\r\n        if (attr != null) {\r\n            value = attr.getValue();\r\n            if (value && value.length > 0)\r\n                value = value[0];\r\n            else\r\n                value = null;\r\n        }\r\n        return value;\r\n    }\r\n    public setLookUp = (id: string, name: string, entityType: string, attribute: string) => {\r\n        var object = new Array();\r\n        object[0] = new Object();\r\n        object[0].id = id;\r\n        object[0].name = name;\r\n        object[0].entityType = entityType;\r\n        _Attributes.getAttribute(attribute).setValue(object);\r\n    }\r\n    public setOptionSetValueByText = (fieldname: string, optionText: string) => {\r\n        var options: any = _Attributes.getAttribute(fieldname).getOptions();\r\n        for (var i = 0; i < options.length; i++) {\r\n            if (options[i].text === optionText) {\r\n                _Attributes.getAttribute(fieldname).setValue(options[i].value);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    public setOptionSetFieldByText = (field: any, optionText: string) => {\r\n        var options = field.getOptions();\r\n        for (var i = 0; i < options.length; i++) {\r\n            if (options[i].text === optionText) {\r\n                field.setValue(options[i].value);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    public setValueByText = (fieldname: string, value: any) => {\r\n        var getField = _Attributes.getAttribute(fieldname);\r\n        if (getField) {\r\n            getField.setValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * @desc Remove all unused values in option set fields\r\n     * @param {String} fieldName - field name\r\n     * @param {String} fieldValue - field value\r\n    */\r\n    public removeOptionSetItem = (fieldName: string, fieldValue: any) => {\r\n        _Controls.getControl(fieldName).removeOption(fieldValue);\r\n    }\r\n    /* find option in optionset by value */\r\n    public findOption = (list: any, value: any) => {\r\n        var rs = null;\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                if (list[i].value === value) {\r\n                    rs = list[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return rs;\r\n    }\r\n    public getParameterByName = (name: string) => {\r\n        name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\r\n        var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\r\n            results = regex.exec(location.search);\r\n        return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\r\n    }\r\n\r\n    public QueryString = (url: string) => {\r\n        // This function is anonymous, is executed immediately and \r\n        // the return value is assigned to QueryString!\r\n        var query_string: any = {};\r\n        var query = url;\r\n        var vars = query.split(\"&\");\r\n        for (var i = 0; i < vars.length; i++) {\r\n            var pair = vars[i].split(\"=\");\r\n            // If first entry with this name\r\n            if (typeof query_string[pair[0]] === \"undefined\") {\r\n                query_string[pair[0]] = pair[1];\r\n                // If second entry with this name\r\n            } else if (typeof query_string[pair[0]] === \"string\") {\r\n                var arr = [query_string[pair[0]], pair[1]];\r\n                query_string[pair[0]] = arr;\r\n                // If third or later entry with this name\r\n            } else {\r\n                query_string[pair[0]].push(pair[1]);\r\n            }\r\n        }\r\n        return query_string;\r\n    };\r\n\r\n    public updateQueryString = (uri: string, key: string, value: string) => {\r\n        var re = new RegExp(\"([?|&])\" + key + \"=.*?(&|#|$)\", \"i\");\r\n        if (uri.match(re)) {\r\n            return uri.replace(re, '$1' + key + \"=\" + value + '$2');\r\n        } else {\r\n            var hash = '';\r\n            var separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\r\n            if (uri.indexOf('#') !== -1) {\r\n                hash = uri.replace(/.*#/, '#');\r\n                uri = uri.replace(/#.*/, '');\r\n            }\r\n            return uri + separator + key + \"=\" + value + hash;\r\n        }\r\n    }\r\n    public removeThousandsSeparator(value: any, decimals: any) {\r\n        if (decimals == undefined || isNaN(decimals))\r\n            decimals = 0;\r\n        if (isNaN(value)) {\r\n            var decimal_sep = ',';\r\n            var thousands_sep = '.';\r\n            if ((window.navigator as any).systemLanguage == 'en-us') {\r\n                var decimal_sep = '.';\r\n                var thousands_sep = ',';\r\n            }\r\n            var n = value.toString();\r\n            n = eval('n.replace(/\\\\' + thousands_sep + '/g,\"\")');\r\n            n = eval('n.replace(/\\\\' + decimal_sep + '/g,\".\")');\r\n            return n;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public openPopupLookup = (fieldNames: Array<string>) => {\r\n\r\n        try {\r\n            var navigationOptions: any = {\r\n                target: 2,\r\n                height: { value: 80, unit: \"%\" },\r\n                width: { value: 80, unit: \"%\" },\r\n                position: 1\r\n            };\r\n\r\n            fieldNames.forEach(fieldName => {\r\n                var control: any = _Controls.getControl(fieldName);\r\n                control.addOnLookupTagClick((e: any) => {\r\n                    e.getEventArgs().preventDefault(); // disable the default behavior which to open the lookup record.\r\n                    // get the lookup record value\r\n                    var lookupRecord = e.getEventArgs().getTagValue();\r\n                    var pageInput: any = {\r\n                        pageType: \"entityrecord\",\r\n                        entityName: lookupRecord.entityType,\r\n                        entityId: lookupRecord.id,\r\n                    };\r\n                    _Navigate.navigateTo(pageInput, navigationOptions)\r\n                });\r\n            });\r\n        }\r\n        catch (e: any) {\r\n            logger.Error(e.message, 'Utilitiy.openPopupLookup')\r\n        }\r\n    }\r\n\r\n    public openNewWindowLookup = (fieldNames: Array<string>) => {\r\n        try {\r\n            fieldNames.forEach(fieldName => {\r\n                var control: any = _Controls.getControl(fieldName);\r\n                control.addOnLookupTagClick((e: any) => {\r\n                    e.getEventArgs().preventDefault(); // disable the default behavior which to open the lookup record.\r\n                    // get the lookup record value\r\n                    var lookupRecord = e.getEventArgs().getTagValue();\r\n                    var url = window.location.href;\r\n                    var index = url.indexOf(\"etn=\")\r\n                    var uri = url.slice(0, index);\r\n                    uri += `etn=${lookupRecord.entityType}&id=${lookupRecord.id}`\r\n                    window.open(uri)\r\n                });\r\n            });\r\n        }\r\n        catch (e: any) {\r\n            logger.Error(e.message, 'Utilitiy.openNewWindowLookup')\r\n        }\r\n    }\r\n   \r\n  sendLog = async (message: string, logerLevel: LogLevel, mod: string) => {\r\n    let $ = (window as any).$ ? (window as any).$ : (window as any).parent.$;\r\n\r\n    let url: string = Xrm.Utility.getGlobalContext().getClientUrl();\r\n    let ipAddress = await $.getJSON('https://api.ipify.org?format=json', function () {});\r\n    let logData: LogData = {\r\n      name: (mod ? mod + '| ' : '') + new Date().toISOString(),\r\n      url: url,\r\n      logerLevel: logerLevel,\r\n      ip: ipAddress ? ipAddress.ip : '',\r\n      func: mod,\r\n      message: message,\r\n    };\r\n    if (Xrm != null && Xrm.Page.ui != null) logData.form = Xrm.Page.ui.formSelector.getCurrentItem().getLabel();\r\n\r\n    if (Xrm != null && Xrm.Page.data != null) {\r\n      logData.entity = Xrm.Page.data.entity.getEntityName();\r\n      logData.entityId = Xrm.Page.data.entity.getId();\r\n    }\r\n\r\n    Helpers.Send(logData);\r\n  };\r\n}\r\n\r\nexport const Utilities = new Utility()\r\n","class Validation {\r\n  private constructor() {}\r\n  private static _instance: Validation;\r\n  public static getInstance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  isFetchXml(fetchXml: string): boolean {\r\n    try {\r\n      if (typeof fetchXml !== 'string') return false;\r\n      const parser = new DOMParser();\r\n      const dom = parser.parseFromString(fetchXml, 'text/xml');\r\n      return dom.documentElement.nodeName === 'fetch';\r\n    } catch (ex : any) {\r\n      console.log(ex.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  isEmail(email: string): boolean {\r\n    try {\r\n      return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email);\r\n    } catch (ex: any) {\r\n      console.log(ex.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  isPhoneNumber(str: string): boolean {\r\n    try {\r\n      return /^\\+?\\d+$/.test(str);\r\n    } catch (ex: any) {\r\n      console.log(ex.message);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const _Validation = Validation.getInstance();\r\n","import { _Attributes } from './Attributes/attributes';\r\nimport { _Controls } from './Controls/controls';\r\nimport { _Entity } from './Entity/entity';\r\nimport { _FormContext } from './Context/FormContext/formcontext';\r\nimport { _GlobalContext } from './Context/GlobalContext/globalcontext';\r\nimport { _GridContext } from './Context/GridContext/gridcontext';\r\nimport { logger } from './Logger/logger';\r\nimport { _Navigate } from './Navigate/navigate';\r\nimport { _OData } from './Odata/odata';\r\nimport { _Process } from './Process/process';\r\nimport { _SOAP } from './SOAP/soap';\r\nimport { Utilities } from './Utility/utility';\r\nimport { _Validation } from './Validation/validation';\r\n\r\nexport class Lib {\r\n  Attributes = _Attributes;\r\n  Controls = _Controls;\r\n  Entity = _Entity;\r\n  FormContext = _FormContext;\r\n  GlobalContext = _GlobalContext;\r\n  GridContext = _GridContext;\r\n  Logger = logger;\r\n  Navigate = _Navigate;\r\n  OData = _OData;\r\n  Process = _Process;\r\n  SOAP = _SOAP;\r\n  Utility = Utilities;\r\n  Validation = _Validation;\r\n}\r\n","\r\nexport class Messages {\r\n  static messages: any;\r\n  private constructor() {}\r\n\r\n  static get(msgId: string): string{\r\n    try{ \r\n      let languageId = Xrm.Utility.getGlobalContext().userSettings.languageId;\r\n\r\n      if (this.messages === undefined) Messages.messages = ANT.Caching.getData('Message-' + languageId);\r\n      return Messages.messages[msgId] ?? msgId;\r\n    }\r\n    catch(ex: any){\r\n      console.log(ex.message);\r\n      return msgId;\r\n    }\r\n\r\n  }\r\n}\r\n","class Webresource {}\r\n\r\nexport const _Webresource = new Webresource();\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Extensions } from './Lib/Extensions/extensions';\r\nimport { Constants as _Constants } from './Constant/constants';\r\nimport { Lib as _Lib } from './Lib/lib';\r\nimport { _Webresource } from './Webresource/webresource';\r\nimport { Messages as _Messages } from './Messages/messages';\r\nimport { _Attributes } from './Lib/Attributes/attributes';\r\nimport { _Controls } from './Lib/Controls/controls';\r\nimport { _Entity } from './Lib/Entity/entity';\r\nimport { _FormContext } from './Lib/Context/FormContext/formcontext';\r\nimport { _GlobalContext } from './Lib/Context/GlobalContext/globalcontext';\r\nimport { _GridContext } from './Lib/Context/GridContext/gridcontext';\r\nimport { logger } from './Lib/Logger/logger';\r\nimport { _Navigate } from './Lib/Navigate/navigate';\r\nimport { _OData } from './Lib/Odata/odata';\r\nimport { _Process } from './Lib/Process/process';\r\nimport { _SOAP } from './Lib/SOAP/soap';\r\nimport { Utilities } from './Lib/Utility/utility';\r\nimport { _Validation } from './Lib/Validation/validation';\r\n\r\nexport let Constants = _Constants;\r\nexport let Lib = new _Lib();\r\nexport let Webresource = _Webresource;\r\nexport let Messages = _Messages;\r\n\r\nexport let Attributes = _Attributes;\r\nexport let Controls = _Controls;\r\nexport let Entity = _Entity;\r\nexport let FormContext = _FormContext;\r\nexport let GlobalContext = _GlobalContext;\r\nexport let GridContext = _GridContext;\r\nexport let Logger = logger;\r\nexport let Navigate = _Navigate;\r\nexport let OData = _OData;\r\nexport let Process = _Process;\r\nexport let SOAP = _SOAP;\r\nexport let Utility = Utilities;\r\nexport let Validation = _Validation;\r\n\r\nnew Extensions();\r\n"],"names":["SOAP_TYPE","Constants","LangCode","TimerControlStateEnum","LogLevel","LogerLevel","FormType","NotificationLevel","TabDisplayState","SubmitMode","RequiredLevel","StructuralProperty","OperationType","BoundParameter","ODataFormattedValue","ODataLookupLogicalName","ODataAssociatedNavigationProperty","Logger","logicalName","primaryId","name","clientType","value","web","logerLevel","url","module","function","ip","form","entity","entityId","message","trace","EmptyGuid","SaveOption","SaveAndClose","SaveAndNew","SOAP_CONSTS","SOAP_ENDPOINT","SOAP_ACTION","text","HTTP_METHOD","GET","POST","PATCH","DELETE","X_HTTP_Method","MERGE","ACCEPT_TYPE","JSON","XML","CONTENT_TYPE","crmWebResources","dialog","$","window","parent","Xrm","_attribute","formContext","getAttribute","this","get","addOnChange","fn","ex","console","log","fireOnChange","getAttributeType","getFormat","getInitialValue","getIsDirty","getIsPartyList","getMax","getMaxLength","getMin","getName","getOption","option","getOptions","getParent","getPrecision","getRequiredLevel","getSelectedOption","getSubmitMode","getText","getUserPrivilege","getValue","isValid","removeOnChange","setIsValid","bool","setPrecision","setRequiredLevel","requirementLevel","None","Recommended","Required","setSubmitMode","mode","Always","Dirty","Never","setValue","Attribute","getInstance","_instance","setRequiredLevels","attrs","Array","isArray","attr","setSubmitModes","clearAttributeValues","getAll","_Attributes","Attributes","refresh","_save","Error","getFormSelector","id","context","ui","formSelector","items","undefined","e","logger","getCurrentItem","close","getViewPortHeight","getViewPortWidth","save","refreshData","refreshUI","getFormType","refreshRibbon","refreshAll","setFormNotification","level","uniqueId","clearFormNotification","navigation","quickForms","ContextBase","FormContext","_FormContext","userSettings","globalContext","client","organizationSettings","getAdvancedConfigSetting","setting","getClientUrl","getCurrentAppName","getCurrentAppProperties","getCurrentAppUrl","getVersion","getWebResourceUrl","webResourceName","getClient","GlobalContext","_GlobalContext","getRrow","gridContext","getSelectedRows","getTotalRecordCount","Grid","getEntityName","getFetchXml","getGridType","getRelationship","getUrl","getViewSelector","openRelatedGrid","_GridContext","GridContext","_globalContext","init","_top","getFormContext","_context","_excutionContext","top","_gridContext","consts","initFromPrimaryControl","primaryControl","Utility","getPageContext","_control","getControl","Control","addCustomFilter","filter","entityLogicaName","addCustomView","viewId","entityName","viewDisplayName","fetchXml","layoutXml","isDefault","addNotification","notification","addOnLookupTagClick","addOption","index","addPreSearch","clearNotification","clearOptions","getContentWindow","successCallback","errorCallback","getControlType","getData","getDefaultView","getDisabled","getEntityTypes","getInitialUrl","getObject","getSearchQuery","getSelectedResults","getShowTime","getSrc","getState","getTotalResultCount","openSearchResult","resultNumber","removeOnLookupTagClick","removeOnPostSave","removeOnPostSearch","removeOnResultOpened","removeOnSelection","removeOption","removePreSearch","setData","setDefaultView","setDisabled","setEntityTypes","entityLogicalNames","setFocus","setNotification","setSearchQuery","searchString","setShowTime","setSrc","string","ControlBase","Section","_tab","tabs","addTabStateChange","getContentType","getDisplayState","removeTabStateChange","setContentType","contentType","setDisplayState","state","getSection","_Controls","getSections","Tab","control","getLabel","getVisible","setLabel","label","setVisible","getAllControls","removeOnLookupTagClicks","fnS","controlName","removeOnPostSaves","removeOnPostSearchs","removeOnResultOpeneds","removeOnSelections","removeOptions","options","removePreSearchs","setDisableds","controlNames","setVisibles","setDisabledAll","getTab","getAllTabs","setTabVisibles","tabNames","tabName","getAllSections","sections","tab","concat","_section","push","find","sec","setSectionVisibles","sectionNames","section","indexOf","openLookupDialog","executionContext","getEventArgs","preventDefault","lookup","getTagValue","_Navigate","openFormDialog","entityType","addOpenLookupDialog","onMobile","addAllLookupOpenDialog","Controls","getPrimaryAttributeValue","data","getDataXml","getId","getEntityReference","addOnSave","addOnLoad","removeOnSave","_Entity","Entity","Extensions","String","prototype","toODataFormattedValue","str","trim","toODataLookupId","toODataLookupEntityType","toODataLookupName","Date","dateDiff","compareDate","date2","date1","getFullYear","getMonth","getDate","setHours","setMinutes","setSeconds","setMilliseconds","getTime","Number","toMoney","decimals","languageId","Intl","NumberFormat","style","currency","minimumFractionDigits","format","toDecimal","MessageHandlerBase","PrefixType","Log","messages","numline","Debug","Info","Information","Warn","Warning","Critical","Trace","timestamp","now","Configuration","Prefix","WriteMessageHandlers","handlerInstance","Helpers","IsLogLevelEnabled","LogLevelIsBitMask","Handler","HandleMessage","LoggerRuntimeConfigurationBuilder","LoggerBuilder","initConfiguration","configuration","defaultConfiguration","DefaultLogLevel","Override","AddWriteMessageHandler","handler","defaultLogLevel","AddWriteMessageHandlers","handlers","ResolveLogLevel","map","SetDefaultLogLevel","logLevel","isBitMask","SetPrefix","prefix","Build","writeMessageHandlers","length","ConsoleMessageHandler","LoggerConfigurationBuilder","UpdateConfiguration","updater","setInitialConfigurationFromCurrent","DevTool","emitEvents","setInterval","LogLevelPrefix","Short","TimePrefix","UseColors","resolveLogLevelPrefix","colorString","ResolveLogLevelPrefix","ANSIColorCodes","Reset","mod","lgLevel","ANT","Caching","colorStart","isSend","method","error","Bright","FgWhite","BgRed","FgBlack","info","FgGreen","warn","FgYellow","Waring","prefixList","timePrefix","ResolveTimePrefix","logLevelPrefix","mgs","Line","Mod","Message","join","stringify","location","href","getJSON","ipAddress","logData","toString","func","Page","Send","devtools","isOpen","prefixString","orientation","emitEvent","dispatchEvent","CustomEvent","detail","widthThreshold","outerWidth","innerWidth","heightThreshold","outerHeight","innerHeight","Firebug","chrome","isInitialized","GetLogLevelShortString","GetLogLevelString","CalculateLogLevelsBitMaskValue","logLevels","IsServerSide","process","currentLogLevel","currentLogLevelIsBitMask","targetLogLevel","prefixType","Full","toLocaleTimeString","toLocaleString","logdata","cre_logger","WebApi","createRecord","then","alert","navigateTo","pageInput","navigationOptions","Navigation","openAlertDialog","alertStrings","alertOptions","closeCallback","openConfirmDialog","confirmStrings","confirmOptions","confirmCallback","confirmed","openErrorDialog","errorOptions","openFile","file","openFileOptions","openForm","entityFormOptions","formParameters","openUrl","openUrlOptions","openWebResource","windowOptions","openWebResourceDialog","webresourceName","title","height","width","position","pageType","target","openView","viewType","callback","openDashboard","dashboardId","Navigate","associateRecords","relatedEntities","relationship","forEach","_","Utilities","removeBrackets","request","getMetadata","boundParameter","Global","parameterTypes","operationType","CRUD","operationName","execute","callWorkflow","workflowId","EntityId","guid","typeName","structuralProperty","EntityType","PrimitiveType","Action","entityLogicalName","deleteRecord","disassociateRecord","relatedEntityId","initDisassociateRequest","disassociateRecords","relatedEntityIds","changeSet","requests","executeMultiple","online","retrieveRecord","retrieveMultipleRecords","maxPageSize","_Validation","isFetchXml","retrievePageFetchXml","pageNumber","count","pagingCookie","createFetchXml","retrieveAllRecordsFetchXml","page","entities","result","fetchXmlPagingCookie","setStateReocord","statecode","statuscode","updateRecord","doRequest","action","uri","RegExp","test","charAt","getGlobalContext","Promise","resolve","reject","XMLHttpRequest","open","encodeURI","setRequestHeader","onreadystatechange","readyState","status","parse","response","send","callAction","actionName","getEntityMetadata","entityMetadata","EntitySetName","startsWith","getFileColumn","entityset","field","_OData","OData","reflow","updateUI","parentStage","nextStage","addOnPreProcessStatusChange","fuc","removeOnPreProcessStatusChange","addOnProcessStatusChange","removeOnProcessStatusChange","addOnStageChange","removeOnStageChange","addOnStageSelected","removeOnStageSelected","getActiveProcess","setActiveProcess","processId","callbackFunction","getProcessInstances","setActiveProcessInstance","processInstanceId","getInstanceId","getInstanceName","getStatus","setStatus","getActiveStage","setActiveStage","stageId","moveNext","movePrevious","getActivePath","getEnabledProcesses","getSelectedStage","_Process","Process","_$","getXmlValue","key","dataType","xml","xmlValue","extraNamespace","htmlEncode","DateTime","toISOString","EntityReference","OptionSet","Money","getXmlEntityData","EntityCollection","entityCollection","i","entityData","Guid","getChildNodes","node","childNodesName","childNodes","tagName","substring","getChildNode","childNodeName","nodes","getNodeTextValueNotNull","getNodeTextValue","textNode","firstChild","textContent","nodeValue","type","valueType","toLowerCase","attrValueIdNode","attrValueEntityNode","attrValueNameNode","lookupId","lookupName","lookupEntity","getEntityData","entitiesNode","entityNodes","aliasedValue","stringValue","xmlEncode","strInput","c","encoded","cnt","max","charCodeAt","fromCharCode","getFetchResult","executeResult","resultsNode","resultSet","getChildNodeText","moreRecords","totalRecordCount","parseInt","parseSingleEntityNode","injectPagingDetails","fetchxml","xmldoc","parseXML","fetch","xmlToString","executeRequest","serverUrl","opt_asyn","header","ajax","async","headers","selectSingleNode","xpathExpr","XPathEvaluator","evaluate","nsResolver","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","setSelectionNamespaces","doc","setProperty","getError","resp","faultXml","responseXML","errorMessage","faultstring","errorCode","bodyNode","nodeName","j","testNode","getNodeText","k","orgServiceFault","l","errorCodeNode","input","constructor","stringToDate","s","b","split","UTC","encodeValue","replace","encodeDate","crmXmlEncode","innerSurrogateAmpersandWorkaround","selectSingleNodeText","x","isNodeNull","crmXmlDecode","entityNode","entityAttrsNode","entityIdNode","entityLogicalNameNode","entityFormattedValuesNode","entityAttrs","attrNameNode","attrValueNode","attributeName","attributeValue","attributes","foNode","fNameNode","fValueNode","fName","fValue","formattedValues","attrXml","a","convertXmlToAttributeObject","xmlnode","parseFloat","aliasValue","aliasType","d","match","ms","Math","round","offset","parseISO8601Date","BusinessEntity","attributesNode","typedAttrSet","attrNode","parseAttibutes","childSet","item","formattedValue","elem","XMLSerializer","serializeToString","xpathExpression","xmlNode","attrName","dateTime","padNumber","getHours","getMinutes","getSeconds","c0","cntlength","buffer","c1","getNamedItem","doSoapRequest","soapBody","requestType","internalCallback","soapXml","req","responseType","retrieve","columnSet","query","ilength","msgBody","resultXml","retrieveResult","deserialize","create","be","serialize","mBody","responseText","update","delete","retrieveMultiple","resultNodes","retriveMultipleResults","associate","relationshipName","targetEntityName","targetId","relatedEntityName","relatedBusinessEntities","output","relatedXml","disassociate","setState","recordId","stateCode","statusCode","assign","entityname","assigneeid","EntityBase","fetchMore","_fetchMore","fetchAll","opt_page","_fetchAll","_fetch","FetchKit","clientUrl","dfd","Deferred","allRecords","paging_fetchxml","collection","promise","fail","XrmOptionSetValue","XrmEntityReference","XrmEntityCollection","XrmValue","attrname","opt_property","hasOwnProperty","attribute","encodedValue","encodedId","encodedLogicalName","sType","collections","collectionLengh","openQuickCreate","oType","resultNode","obj","Object","lenj","sKey","parentNode","lenk","tempParentNode","tempParentNodeChildNodes","entRef","entCv","tempNode","subNode","entOsv","oChildNodes","leni","entityReferenceNode","y","leny","itemNodes","z","lenz","itemNodeChildNodes","itemRef","partyListNodes","pi","lenpi","partyReferenceNode","foVal","o","leno","isNaN","callActionBase","requestXml","asyn","responseParams","outputParams","traceText","getElementsByTagName","inputParams","ns","param","_FetchKit","_EntityBase","successCallBack","_SOAP","SOAP","getQueryStringParameter","paramToRetrieve","search","params","singleParam","decodeURIComponent","queryStringParameterToObject","vals","domParser","DOMParser","xmlSerializer","fetchXmlDocument","parseFromString","setAttribute","cookieDoc","innerPagingCookie","initLookup","guidEmpty","autoMappingValue","keys","fields","endsWith","op","calculateAge","dob","exactDate","age","birthDate","currentDate","date","month","year","getCurrentUserRoles","roles","checkUserHaveRoles","roleNames","some","roleName","role","clickRibbonButton","Messages","isSameGuId","guid1","guid2","toUpperCase","showProgressIndicator","closeProgressIndicator","reFreshIframe","subgrid","src","getLookupValue","fieldName","setLookUp","object","setOptionSetValueByText","fieldname","optionText","setOptionSetFieldByText","setValueByText","getField","removeOptionSetItem","fieldValue","findOption","list","rs","getParameterByName","results","exec","QueryString","query_string","vars","pair","arr","updateQueryString","re","hash","separator","openPopupLookup","fieldNames","unit","lookupRecord","openNewWindowLookup","slice","sendLog","removeThousandsSeparator","decimal_sep","thousands_sep","navigator","systemLanguage","n","eval","documentElement","isEmail","email","isPhoneNumber","Validation","Lib","msgId","_Webresource","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","call","Webresource"],"sourceRoot":""}
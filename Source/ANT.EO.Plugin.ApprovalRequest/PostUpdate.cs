// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2021 All Rights Reserved
// </copyright>
// <author></author>
// <date>12/17/2021 5:07:30 PM</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using Microsoft.Xrm.Sdk;
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;

namespace ANT.EO.Plugin.ApprovalRequest
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// Plugin development guide: https://docs.microsoft.com/powerapps/developer/common-data-service/plug-ins
    /// Best practices and guidance: https://docs.microsoft.com/powerapps/developer/common-data-service/best-practices/business-logic/
    /// </summary>    
    public class PostUpdate : IPlugin
    {
        
        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "Execute")]
        public void Execute(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new InvalidPluginExecutionException("serviceProvider");
            }

            // Construct the local plug-in context.
            var localPluginContext = new LocalPluginContext(serviceProvider);

          
            try
            {
                // Invoke the custom implementation 
                ExecuteCdsPlugin(localPluginContext);

                // now exit - if the derived plug-in has incorrectly registered overlapping event registrations,
                // guard against multiple executions.
                return;
            }
            catch (FaultException<OrganizationServiceFault> orgServiceFault)
            {
                localPluginContext.Trace($"Exception: {orgServiceFault.ToString()}");

                // Handle the exception.
                throw new InvalidPluginExecutionException($"OrganizationServiceFault: {orgServiceFault.Message}", orgServiceFault);
            }
            
        }

        /// <summary>
        /// Placeholder for a custom plug-in implementation. 
        /// </summary>
        /// <param name="localPluginContext">Context for the current plug-in.</param>
        protected virtual void ExecuteCdsPlugin(ILocalPluginContext localPluginContext)
        {
            // TODO: Code here
            // When Request Status = Processing => Create Approval Record
            IOrganizationService service = localPluginContext.CurrentUserService;
            IPluginExecutionContext context = (IPluginExecutionContext)localPluginContext.PluginExecutionContext;
            //Account acct = context.InputParameters["Target"].ToEntity<Account>();

            Entity entity = (Entity)context.InputParameters["Target"];
            Entity postImage = context.PostEntityImages["PostImage"];

            if (entity.Contains("ant_requeststatus") && entity.GetAttributeValue<OptionSetValue>("ant_requeststatus").Value == (int)Business.REQUEST_STATUS.Processing)
            {
                string entityName = (postImage.Contains("ant_entityname")) ? postImage.GetAttributeValue<string>("ant_entityname") : null;
                EntityReference _DV = (postImage.Contains("ant_dimensionvalueid")) ? postImage.GetAttributeValue<EntityReference>("ant_dimensionvalueid") : null;
                DateTime? _TransactionDate = (postImage.Contains("ant_effectivedate")) ? postImage.GetAttributeValue<DateTime?>("ant_effectivedate") : null;
                EntityReference _BU = (postImage.Contains("ant_businessunitid")) ? postImage.GetAttributeValue<EntityReference>("ant_businessunitid") : null;
                EntityReference _Project = (postImage.Contains("ant_projectid")) ? postImage.GetAttributeValue<EntityReference>("ant_projectid") : null;

                // 1. Find Config By Entity Name (1 entity may have more than 1 approval config)
                EntityCollection configs = Business.FindApprovalConfig(service, entityName, _TransactionDate, _DV, _BU, _Project);

                if (configs.Entities.Count == 0)
                {
                    throw new InvalidPluginExecutionException(Business.ERR_MSG_01);
                }

                // 2. Get correct Approval Config Line base on the record data
                Entity approvalConfig = null;
                Entity configLine = Business.GetApprovalConfigLine(service, configs, postImage.Id, out approvalConfig);
                if (configLine == null)
                {
                    throw new InvalidPluginExecutionException(Business.ERR_MSG_01);
                }

                // 3. Create Approval Record
                // get Record Name
                var RecordName = postImage.GetAttributeValue<string>("ant_name");
                string DataType = string.Empty;

                var Approval = new Entity("ant_approval");
                Approval["ant_name"] = "Approval For " + RecordName;
                //Approval["ant_entity"] = EntityName;
                Approval["ant_recordid"] = postImage.Id.ToString();
                Approval["ant_fieldnameentity"] = approvalConfig["ant_fieldnameentity"];
                Approval["ant_fieldnamevalue"] = RecordName;
                //Approval["ant_type"] = ""; // TODO: What value to input?
                Approval["ant_currentset"] = 1;
                Approval["ant_nextset"] = 0;
                Approval["ant_approvalconfiguration"] = approvalConfig.ToEntityReference();
                Approval["ant_lastset"] = Business.CountApprovalConfigLevel(service, configLine.Id);
                Approval["ant_approvalcode"] = configLine.GetAttributeValue<string>("ant_code");
                Approval["ant_approvalconfiglineid"] = configLine.ToEntityReference();
                Guid ApprovalId = service.Create(Approval);

                var ApprovalLevels = Business.GetApprovalLevels(service, configLine.Id);

                foreach (var record in ApprovalLevels.Entities)
                {

                    var ApprovalLevel = new Entity("ant_approvallevel");
                    // Name
                    if (record.Attributes.ContainsKey("ant_name"))
                        ApprovalLevel["ant_name"] = record["ant_name"];

                    // Place
                    if (record.Attributes.ContainsKey("ant_place"))
                        ApprovalLevel["ant_place"] = record["ant_place"];

                    // Email 
                    if (record.Attributes.ContainsKey("ant_email"))
                        ApprovalLevel["ant_email"] = record["ant_email"];

                    // User
                    if (record.Attributes.ContainsKey("ant_user"))
                        ApprovalLevel["ant_user"] = new EntityReference("systemuser", record.GetAttributeValue<EntityReference>("ant_user").Id);

                    // Team
                    if (record.Attributes.ContainsKey("ant_team"))
                        ApprovalLevel["ant_team"] = new EntityReference("team", record.GetAttributeValue<EntityReference>("ant_team").Id);

                    // Approval Type
                    if (record.Attributes.ContainsKey("ant_approvaltype"))
                        ApprovalLevel["ant_approvaltype"] = record["ant_approvaltype"];

                    // Multiple Approval Type
                    if (record.Attributes.ContainsKey("ant_multipleapprovaltype"))
                        ApprovalLevel["ant_multipleapprovaltype"] = record["ant_multipleapprovaltype"];

                    // Guids
                    if (record.Attributes.ContainsKey("ant_guids"))
                        ApprovalLevel["ant_guids"] = record["ant_guids"];

                    // Follow Emails
                    if (record.Attributes.ContainsKey("ant_followemails"))
                        ApprovalLevel["ant_followemails"] = record["ant_followemails"];

                    // Approval
                    ApprovalLevel["ant_approval"] = new EntityReference("ant_approval", ApprovalId);

                    // Create Record
                    service.Create(ApprovalLevel);
                }

                // 4. Submit Approval Record
                var ApprovalUpdate = new Entity("ant_approval", ApprovalId);
                ApprovalUpdate["ant_approvalsignal"] = true;
                ApprovalUpdate["ant_processstatus"] = new OptionSetValue((int)Business.PROCESS_STATUS.Process);
                service.Update(ApprovalUpdate);
            }
            
        }

    }

    //This interface provides an abstraction on top of IServiceProvider for commonly used PowerApps CDS Plugin development constructs
    public interface ILocalPluginContext
    {
        // The PowerApps CDS organization service for current user account
        IOrganizationService CurrentUserService { get; }

        // The PowerApps CDS organization service for system user account
        IOrganizationService SystemUserService { get; }

        // IPluginExecutionContext contains information that describes the run-time environment in which the plugin executes, information related to the execution pipeline, and entity business information
        IPluginExecutionContext PluginExecutionContext { get; }

        // Synchronous registered plugins can post the execution context to the Microsoft Azure Service Bus.
        // It is through this notification service that synchronous plug-ins can send brokered messages to the Microsoft Azure Service Bus
        IServiceEndpointNotificationService NotificationService { get; }

        // Provides logging run time trace information for plug-ins. 
        ITracingService TracingService { get; }

        // Writes a trace message to the CDS trace log
        void Trace(string message);
    }

    /// <summary>
    /// Plug-in context object. 
    /// </summary>
    public class LocalPluginContext : ILocalPluginContext
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "LocalPluginContext")]
        internal IServiceProvider ServiceProvider { get; private set; }

        /// <summary>
        /// The PowerApps CDS organization service for current user account.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "LocalPluginContext")]
        public IOrganizationService CurrentUserService { get; private set; }

        /// <summary>
        /// The PowerApps CDS organization service for system user account.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "LocalPluginContext")]
        public IOrganizationService SystemUserService { get; private set; }

        /// <summary>
        /// IPluginExecutionContext contains information that describes the run-time environment in which the plug-in executes, information related to the execution pipeline, and entity business information.
        /// </summary>
        public IPluginExecutionContext PluginExecutionContext { get; private set; }

        /// <summary>
        /// Synchronous registered plug-ins can post the execution context to the Microsoft Azure Service Bus. <br/> 
        /// It is through this notification service that synchronous plug-ins can send brokered messages to the Microsoft Azure Service Bus.
        /// </summary>
        public IServiceEndpointNotificationService NotificationService { get; private set; }

        /// <summary>
        /// Provides logging run-time trace information for plug-ins. 
        /// </summary>
        public ITracingService TracingService { get; private set; }

        /// <summary>
        /// Helper object that stores the services available in this plug-in.
        /// </summary>
        /// <param name="serviceProvider"></param>
        public LocalPluginContext(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new InvalidPluginExecutionException("serviceProvider");
            }

            // Obtain the execution context service from the service provider.
            PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

            // Obtain the tracing service from the service provider.
            TracingService = new LocalTracingService(serviceProvider);

            // Get the notification service from the service provider.
            NotificationService = (IServiceEndpointNotificationService)serviceProvider.GetService(typeof(IServiceEndpointNotificationService));

            // Obtain the organization factory service from the service provider.
            IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

            // Use the factory to generate the organization service.
            CurrentUserService = factory.CreateOrganizationService(PluginExecutionContext.UserId);

            // Use the factory to generate the organization service.
            SystemUserService = factory.CreateOrganizationService(null);

        }

        /// <summary>
        /// Writes a trace message to the CRM trace log.
        /// </summary>
        /// <param name="message">Message name to trace.</param>
        public void Trace(string message)
        {
            if (string.IsNullOrWhiteSpace(message) || TracingService == null)
            {
                return;
            }

            if (PluginExecutionContext == null)
            {
                TracingService.Trace(message);
            }
            else
            {
                TracingService.Trace($"{message}, Correlation Id: {PluginExecutionContext.CorrelationId}, Initiating User: {PluginExecutionContext.InitiatingUserId}");
            }
        }
    }

    // Specialized ITracingService implementation that prefixes all traced messages with a time delta for Plugin performance diagnostics
    public class LocalTracingService : ITracingService
    {
        private readonly ITracingService _tracingService;

        private DateTime _previousTraceTime;

        public LocalTracingService(IServiceProvider serviceProvider)
        {
            DateTime utcNow = DateTime.UtcNow;

            var context = (IExecutionContext)serviceProvider.GetService(typeof(IExecutionContext));

            DateTime initialTimestamp = context.OperationCreatedOn;

            if (initialTimestamp > utcNow)
            {
                initialTimestamp = utcNow;
            }

            _tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            _previousTraceTime = initialTimestamp;
        }

        public void Trace(string message, params object[] args)
        {
            var utcNow = DateTime.UtcNow;

            // The duration since the last trace.
            var deltaMilliseconds = utcNow.Subtract(_previousTraceTime).TotalMilliseconds;

            _tracingService.Trace($"[+{deltaMilliseconds:N0}ms)] - {message}");

            _previousTraceTime = utcNow;
        }
    }
}